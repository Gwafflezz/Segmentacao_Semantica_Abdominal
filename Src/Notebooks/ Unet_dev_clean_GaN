{"cells":[{"cell_type":"markdown","metadata":{"id":"dUdxPPoj_xJt"},"source":["#Implementação da arquitetura"]},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import Model\n","# Bloco convolucional com regularização L2\n","def ConvBlock(tensor, num_feature):\n","    x = tf.keras.layers.Conv2D(\n","        num_feature, (3,3),\n","        activation='relu',\n","        kernel_initializer='he_normal',\n","        padding='same',\n","        kernel_regularizer=tf.keras.regularizers.l2(1e-4)\n","    )(tensor)\n","\n","    x = tf.keras.layers.BatchNormalization()(x)\n","    x = tf.keras.layers.Dropout(0.2)(x)\n","\n","    x = tf.keras.layers.Conv2D(\n","        num_feature, (3,3),\n","        activation='relu',\n","        kernel_initializer='he_normal',\n","        padding='same',\n","        kernel_regularizer=tf.keras.regularizers.l2(1e-4)\n","    )(x)\n","\n","    x = tf.keras.layers.BatchNormalization()(x)\n","    return x\n","\n","# Seção encoder com filtros aumentados\n","def encoder_block(tensor, num_feature):\n","    x = ConvBlock(tensor, num_feature)\n","    p = tf.keras.layers.MaxPooling2D((2,2))(x)\n","    return x, p\n","\n","# Seção decoder com conexões residuais\n","def decoder_block(tensor, skip_connection, num_feature):\n","    x = tf.keras.layers.Conv2DTranspose(\n","        num_feature, (2,2),\n","        strides=(2,2),\n","        padding='same'\n","    )(tensor)\n","\n","    x = tf.keras.layers.concatenate([x, skip_connection])\n","    x = ConvBlock(x, num_feature)\n","    return x\n","\n","# Arquitetura U-Net modificada\n","def Unet(n_classes, tensor_shape):\n","    input = tf.keras.layers.Input(tensor_shape)\n","\n","    # Encoder\n","    skip1, c1 = encoder_block(input, 32)    # 256x256x1 → 128x128x32\n","    skip2, c2 = encoder_block(c1, 64)       # 128x128x32 → 64x64x64\n","    skip3, c3 = encoder_block(c2, 128)      # 64x64x64 → 32x32x128\n","    skip4, c4 = encoder_block(c3, 256)      # 32x32x128 → 16x16x256\n","    skip5, c5 = encoder_block(c4, 512)      # 16x16x256 → 8x8x512\n","\n","    # Bottleneck\n","    c6 = ConvBlock(c5, 1024)                # 8x8x512 → 8x8x1024\n","\n","    # Decoder\n","    c7 = decoder_block(c6, skip5, 512)      # 8x8x1024 → 16x16x512\n","    c8 = decoder_block(c7, skip4, 256)      # 16x16x512 → 32x32x256\n","    c9 = decoder_block(c8, skip3, 128)      # 32x32x256 → 64x64x128\n","    c10 = decoder_block(c9, skip2, 64)      # 64x64x128 → 128x128x64\n","    c11 = decoder_block(c10, skip1, 32)     # 128x128x64 → 256x256x32\n","\n","    # Camada de saída direta\n","    output = tf.keras.layers.Conv2D(\n","        n_classes, (1,1),\n","        activation='softmax',\n","        kernel_regularizer=tf.keras.regularizers.l2(1e-4)\n","    )(c11)\n","\n","    model = tf.keras.Model(input, output, name=\"Enhanced_U-Net\")\n","    return model"],"metadata":{"id":"xM1V7RUw00Hv","executionInfo":{"status":"ok","timestamp":1742232833662,"user_tz":180,"elapsed":4303,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dAQkngcWyHQh"},"source":["# Pré Processamento"]},{"cell_type":"markdown","metadata":{"id":"RnmOJAtXVHXp"},"source":["## Utils\n"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"DBg6A0xCyGwU","executionInfo":{"status":"ok","timestamp":1742232833669,"user_tz":180,"elapsed":42,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["import tensorflow as tf\n","import keras\n","import os\n","import re\n","import glob\n","import numpy as np\n","import cv2"]},{"cell_type":"markdown","metadata":{"id":"c2tkCcnmVq3V"},"source":["**Dicionário RGB > Rótulo**"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"SyRSUzo8OAKg","executionInfo":{"status":"ok","timestamp":1742232833671,"user_tz":180,"elapsed":18,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["def gen_dict_cores():\n","    mask_dict = {\n","        (0, 0, 0): 0,        # Preto = None\n","        (100, 0, 100): 1,    # Violeta = Liver (fígado)\n","        (255, 255, 255): 2,  # Branco = Bone (Osso)\n","        (0, 255, 0): 3,      # Verde = Gallbladder (Vesícula biliar)\n","        (255, 255, 0): 4,    # Amarelo = Kidney (Rins)\n","        (0, 0, 255): 5,      # Azul = Pancreas\n","        (255, 0, 0): 6,      # Vermelho = Vessels (Veias)\n","        (255, 0, 255): 7,    # Rosa = Spleen (Baço)\n","        (0, 255, 255): 8     # Azul claro = Adrenal (Glândula Adrenal)\n","    }\n","    return mask_dict"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"OPPpXV6HAGI6","executionInfo":{"status":"ok","timestamp":1742232833672,"user_tz":180,"elapsed":18,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["\"\"\" Função que mapeia cada pixel da imagem ao valor rgb definido no dicionário,\n"," e substitui o valor pelo rótulo correspondente, em um novo array.\"\"\"\n","\n","def RGBtoClass(rgb, dictCores):\n","    arr = np.zeros(rgb.shape[:2])  # Inicializa a matriz de rótulos\n","\n","    for color, label in dictCores.items():  # Itera sobre os pares (cor, rótulo)\n","        color = np.array(color)  # Converte a cor para um array NumPy\n","        arr[np.all(rgb == color, axis=-1)] = label  # Atribui o rótulo aos pixels que correspondem à cor\n","\n","    return arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ba4fuZk5YSdp"},"outputs":[],"source":["def onehot_to_rgb(oneHot, dictCores):\n","    oneHot = np.array(oneHot)  # Converte para array numpy\n","    oneHot = np.argmax(oneHot, axis=-1)  # Seleciona o maior valor (índice)\n","    output = np.zeros(oneHot.shape + (3,))  # Cria a matriz RGB de saída\n","    oneHot = np.expand_dims(oneHot, axis=-1)  # Expande as dimensões\n","\n","    for color, index in dictCores.items():\n","        output[np.all(oneHot == index, axis=-1)] = color\n","\n","    return np.uint8(output)"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"CRMZbmEQdfz9","executionInfo":{"status":"ok","timestamp":1742232833674,"user_tz":180,"elapsed":16,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["\"\"\"esta função segmenta o nome do arquivo para o img_loader ordenar o dataset\n","na ordem do diretório e ter correspondência entre a lista de imagens e máscaras\"\"\"\n","\n","def natural_sort_key(s):\n","    return [int(text) if text.isdigit() else text.lower() for text in re.split('(\\d+)', s)]\n","\n","\"\"\" img_loader recebe um caminho de diretório,uma lista vazia e  uma tupla com\n","dimensões de imagem. Lê as imagens png ou jpg do diretório, ordena pelo nome e\n"," armazena a imagem na lista img_data e seu nome na lista img_names\"\"\"\n","def img_loader(path, img_data, size=None, rgb=True):\n","  #lista para o nome dos arquivos\n","  img_names = []\n","\n","  for diretorio_path in sorted(glob.glob(path)):\n","    for img_path in sorted(glob.glob(os.path.join(diretorio_path, \"*.[pj]*[np]*[g]*\")), key=natural_sort_key): #percorre o diretório na ordem natural dos títulos de arquivo\n","      img = cv2.imread(img_path,\n","                       cv2.IMREAD_COLOR if rgb\n","                       else cv2.IMREAD_GRAYSCALE) #img tem 3 canais na 3 dimensao se RGB, e 1 canal se preto/branco\n","\n","      if rgb:  # Corrige para formato RGB\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","      if size is not None:\n","        img = cv2.resize(img, size) #redimensiona conforme o parâmetro\n","\n","      img_data.append(img.astype(np.uint8)) #add a imagem na lista do parametro\n","      img_names.append(os.path.basename(img_path)) #add o nome do arquivo na lista de nomes\n","\n","  #return img_data, img_names\n","  return np.array(img_data), img_names"]},{"source":["import os\n","import re\n","import glob\n","import numpy as np\n","import cv2\n","\n","def natural_sort_key(s):\n","    return [int(text) if text.isdigit() else text.lower() for text in re.split('(\\d+)', s)]\n","\n","def img_loader(path, img_data, size=None, rgb=True):\n","  #lista para o nome dos arquivos\n","  img_names = []\n","  # img_data is now a list to which you can append\n","  loaded_img_data = []\n","\n","  for diretorio_path in sorted(glob.glob(path)):\n","    for img_path in sorted(glob.glob(os.path.join(diretorio_path, \"*.[pj]*[np]*[g]*\")), key=natural_sort_key): #percorre o diretório na ordem natural dos títulos de arquivo\n","      img = cv2.imread(img_path,\n","                       cv2.IMREAD_COLOR if rgb\n","                       else cv2.IMREAD_GRAYSCALE) #img tem 3 canais na 3 dimensao se RGB, e 1 canal se preto/branco\n","\n","      if rgb:  # Corrige para formato RGB\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","      if size is not None:\n","        img = cv2.resize(img, size) #redimensiona conforme o parâmetro\n","\n","      loaded_img_data.append(img.astype(np.uint8)) #add a imagem na lista do parametro\n","      img_names.append(os.path.basename(img_path)) #add o nome do arquivo na lista de nomes\n","\n","  #return img_data, img_names\n","  return np.array(loaded_img_data), img_names # convert the list to an array before returning"],"cell_type":"code","metadata":{"id":"zxCphh9j2soY","executionInfo":{"status":"ok","timestamp":1742232833696,"user_tz":180,"elapsed":21,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","execution_count":7,"metadata":{"id":"ABSjbdexPe38","executionInfo":{"status":"ok","timestamp":1742232833701,"user_tz":180,"elapsed":24,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["def save_dataset(X_train, X_val, X_test, y_train, y_val, y_test, save_dir=\"dataset\"):\n","    os.makedirs(save_dir, exist_ok=True)\n","\n","    np.save(os.path.join(save_dir, \"X_train.npy\"), X_train)\n","    np.save(os.path.join(save_dir, \"X_val.npy\"), X_val)\n","    np.save(os.path.join(save_dir, \"X_test.npy\"), X_test)\n","    np.save(os.path.join(save_dir, \"y_train.npy\"), y_train)\n","    np.save(os.path.join(save_dir, \"y_val.npy\"), y_val)\n","    np.save(os.path.join(save_dir, \"y_test.npy\"), y_test)\n","\n","    print(f\"Dataset salvo em {save_dir}\")\n","\n","def load_dataset(save_dir=\"dataset\"):\n","\n","    X_train = np.load(os.path.join(save_dir, \"X_train.npy\"))\n","    X_val = np.load(os.path.join(save_dir, \"X_val.npy\"))\n","    X_test = np.load(os.path.join(save_dir, \"X_test.npy\"))\n","    y_train = np.load(os.path.join(save_dir, \"y_train.npy\"))\n","    y_val = np.load(os.path.join(save_dir, \"y_val.npy\"))\n","    y_test = np.load(os.path.join(save_dir, \"y_test.npy\"))\n","\n","    print(f\"Dataset carregado de {save_dir}\")\n","    return X_train, X_val, X_test, y_train, y_val, y_test\n"]},{"cell_type":"markdown","metadata":{"id":"eSsJxP-VUU-I"},"source":["##Dataloader"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"8KbTZfgDUvpb","executionInfo":{"status":"ok","timestamp":1742232834002,"user_tz":180,"elapsed":308,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["import tensorflow as tf\n","import keras\n","from keras.utils import to_categorical\n","import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","import cv2\n","from google.colab.patches import cv2_imshow\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.utils import class_weight\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"w0ji-TtDgKFC","executionInfo":{"status":"ok","timestamp":1742232834250,"user_tz":180,"elapsed":40,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["# caminhos para os diretórios das imagens\n","#real_img_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/images/train\"\n","# não tem mascara de treino pra ultrasons reais\n","sim_img_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/images/train\"\n","sim_mask_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/annotations/train\"\n","\n","#real_img_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/images/test\"\n","#real_mask_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/annotations/test\"\n","sim_img_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/images/test\"\n","sim_mask_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/annotations/test\"\n"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"w03p7CWk8nEm","colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"status":"ok","timestamp":1742232837124,"user_tz":180,"elapsed":49,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"9111991e-89e1-4991-e450-8ae7b9b07bb2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["'Rimg_val = []\\nRimg_val_names = []\\nRmask_val = []\\nRmask_val_names = []'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":10}],"source":["#conjuntos de treino\n","  #imagens simuladas\n","Simg_treino = []\n","Simg_treino_names = []\n","Smask_treino = []\n","Smask_treino_names = []\n","  #imagens reais\n","\"\"\"Rimg_treino = []\n","Rimg_treino_names = []\n","#ñ tem mascara real p teste\"\"\"\n","\n","#conjuntos de teste\n","  #imagens simuladas\n","Simg_val = []\n","Simg_val_names = []\n","Smask_val = []\n","Smask_val_names = []\n","\n","  #imagens reais\n","\"\"\"Rimg_val = []\n","Rimg_val_names = []\n","Rmask_val = []\n","Rmask_val_names = []\"\"\"\n"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"-r407IjxJHIx","executionInfo":{"status":"ok","timestamp":1742232909268,"user_tz":180,"elapsed":70717,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["#Carregando os dados:\n","\n","dim = (256,256)\n","Simg_treino, Simg_treino_names = img_loader(sim_img_treino, Simg_treino,dim, False)\n","Smask_treino, Smask_treino_names = img_loader(sim_mask_treino,Smask_treino,dim)\n","#Rimg_treino, Rimg_treino_names = img_loader(real_img_treino,Rimg_treino,None,False)\n","\n","Simg_val, Simg_val_names = img_loader(sim_img_val, Simg_val,dim, False)\n","Smask_val, Smask_val_names = img_loader(sim_mask_val,Smask_val,dim)\n","#Rimg_val, Rimg_val_names = img_loader(real_img_val, Rimg_val,None,False)\n","#Rmask_val, Rmask_val_names = img_loader(real_mask_val,Rmask_val)\n"]},{"cell_type":"code","source":["Smask_treino.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3NgaQOWUggKF","executionInfo":{"status":"ok","timestamp":1742215783004,"user_tz":180,"elapsed":13,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"0f085c1c-5fe7-40a2-ae06-9d4c634196f6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(633, 256, 256, 3)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","execution_count":12,"metadata":{"id":"BwFEkyY_N4WL","executionInfo":{"status":"ok","timestamp":1742232909352,"user_tz":180,"elapsed":58,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["'''concatenando as imagens e mascaras de treino / teste para separar ao carregar\n","no  train_test_split'''\n","all_imgs = np.concatenate((Simg_treino, Simg_val), axis=0)\n","all_masks = np.concatenate((Smask_treino, Smask_val), axis=0)\n","\n","all_imgname = Simg_treino_names + Simg_val_names\n","all_maskname = Smask_treino_names + Smask_val_names\n","\n","all_imgs  = np.expand_dims(all_imgs, axis=3)\n","#all_imgs.shape, all_masks.shape"]},{"cell_type":"markdown","metadata":{"id":"Ee0JzR_YW4b8"},"source":["**Convertendo máscaras**"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"FdrM1BRO_CCu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742232925847,"user_tz":180,"elapsed":16478,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"ee1bfb0d-bdae-45ff-bcf3-4463ec44d03e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Classes únicas nos pixels das  máscaras : [0. 1. 2. 3. 4. 5. 6. 7. 8.] (926, 256, 256, 1)\n"]}],"source":["dictCores = gen_dict_cores()\n","all_mask_class = []\n","\n","for mask in  all_masks:\n","    onehotmask = RGBtoClass(mask, dictCores)\n","    all_mask_class.append(onehotmask)\n","\n","all_mask_class = np.array(all_mask_class)\n","all_mask_class = np.expand_dims(all_mask_class, axis=3)\n","\n","print(\"Classes únicas nos pixels das  máscaras :\", np.unique(all_mask_class), all_mask_class.shape)"]},{"cell_type":"markdown","metadata":{"id":"NmHs5SjSTfsA"},"source":["**Divisão do dataset em conjuntos de treino , validação e teste**\n","\n"]},{"cell_type":"code","execution_count":14,"metadata":{"id":"kuZdL1G8gL2o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742232926123,"user_tz":180,"elapsed":271,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"d7f58d3d-7618-4773-afac-6964a0d3f1d0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Treino: 708, Validação: 125, Teste: 93\n"]}],"source":["# Divisão inicial: 10% para teste e 90% para treino e validação\n","X_train_val, X_test, y_train_val, y_test = train_test_split(\n","    all_imgs, all_mask_class, test_size=0.1, random_state=0, shuffle=False\n",")\n","\n","# Segunda divisão: 15% para validação e 85% para teste\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train_val, y_train_val, test_size=0.15, random_state=0, shuffle=False\n",")\n","\n","# tamanhos dos conjuntos\n","print(f\"Treino: {len(X_train)}, Validação: {len(X_val)}, Teste: {len(X_test)}\")"]},{"cell_type":"code","execution_count":15,"metadata":{"id":"XdjlxKQJQOXW","executionInfo":{"status":"ok","timestamp":1742232926344,"user_tz":180,"elapsed":220,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["#normalizando os conjuntos\n","X_trainG = X_train.astype('float32') / 255.0\n","X_valG = X_val.astype('float32') / 255.0\n","X_testG = X_test.astype('float32') / 255.0\n","\n","y_trainG = y_train.astype(np.int32)\n","y_valG = y_val.astype(np.int32)\n","y_testG = y_test.astype(np.int32)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b0ObKp0cPmJT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742215818344,"user_tz":180,"elapsed":15650,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"851e437b-4077-4b51-9ffc-dabe99e2a7dc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset salvo em /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal\n"]}],"source":["# Salvando os dados\n","save_dataset(X_trainG, X_valG, X_testG, y_trainG, y_valG, y_testG, save_dir = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal\")"]},{"cell_type":"markdown","metadata":{"id":"4l7SI2FEYMax"},"source":["retorna X_train,"]},{"cell_type":"markdown","metadata":{"id":"IJZxsKdvlmq4"},"source":[" **Balanceamento das classes**"]},{"cell_type":"markdown","metadata":{"id":"kU_-tY_R6hPB"},"source":["# Treinamento"]},{"cell_type":"code","source":["########################## FUNÇÕES DE PERDA ##########################\n","from tensorflow.keras.losses import Loss\n","from typing import Optional, List, Union\n","\n","########## Dice Loss ##########\n","def dice_coef_loss(y_true, y_pred, smooth=1e-6):\n","    \"\"\"\n","    Generalized Dice Loss para multiclasse.\n","    y_true: tensor int (shape: (batch, height, width, 1)) - rótulos inteiros.\n","    y_pred: tensor float (shape: (batch, height, width, num_classes)) - probabilidades.\n","    \"\"\"\n","    # Converte y_true para one-hot (batch, height, width, num_classes)\n","    y_true_onehot = tf.one_hot(tf.squeeze(y_true, axis=-1), depth=tf.shape(y_pred)[-1])\n","\n","    # Calcula interseção e soma para cada classe\n","    intersection = tf.reduce_sum(y_true_onehot * y_pred, axis=(1, 2))\n","    union = tf.reduce_sum(y_true_onehot + y_pred, axis=(1, 2))\n","\n","    # Calcula Dice score por classe e média\n","    dice = tf.reduce_mean((2. * intersection + smooth) / (union + smooth), axis=-1)\n","    return 1.0 - dice\n","\n","########## Jaccard Loss ##########\n","def jaccard_loss(y_true, y_pred, smooth=1e-6):\n","    \"\"\"\n","    IoU Loss para multiclasse.\n","    \"\"\"\n","    y_true_onehot = tf.one_hot(tf.squeeze(y_true, axis=-1), depth=tf.shape(y_pred)[-1])\n","\n","    intersection = tf.reduce_sum(y_true_onehot * y_pred, axis=(1, 2))\n","    total = tf.reduce_sum(y_true_onehot + y_pred, axis=(1, 2))\n","    union = total - intersection\n","\n","    iou = tf.reduce_mean((intersection + smooth) / (union + smooth), axis=-1)\n","    return 1.0 - iou\n","\n","########## Focal Loss ##########\n","def FocalLoss(y_true, y_pred, alpha=0.25, gamma=2.0):\n","    \"\"\"\n","    Focal Loss para multiclasse (rótulos inteiros).\n","    \"\"\"\n","    y_true = tf.squeeze(y_true, axis=-1)  # Remove a dimensão extra\n","    y_true_onehot = tf.one_hot(tf.cast(y_true, tf.int32), depth=tf.shape(y_pred)[-1])\n","\n","    # Calcula cross-entropy\n","    ce = tf.keras.losses.CategoricalCrossentropy(reduction='none')(y_true_onehot, y_pred)\n","\n","    # Calcula probabilidades da classe verdadeira\n","    p = tf.reduce_sum(y_pred * y_true_onehot, axis=-1)\n","\n","    # Focal Loss\n","    focal_loss = tf.pow(1.0 - p, gamma) * ce\n","    focal_loss = alpha * focal_loss\n","    return tf.reduce_mean(focal_loss)\n","\n","########## Combo Loss ##########\n","def Combo_loss(y_true, y_pred, alpha=0.5, beta=0.5):\n","    \"\"\"\n","    Combina Focal Loss e Dice Loss.\n","    alpha: peso para Focal Loss.\n","    beta: peso para Dice Loss.\n","    \"\"\"\n","    focal = FocalLoss(y_true, y_pred)\n","    dice = dice_coef_loss(y_true, y_pred)\n","    return (alpha * focal) + (beta * dice)\n","\n","\n","########### Tversky Loss ############\n","\n","def TverskyLoss(y_true, y_pred, alpha=0.7, beta=0.3, smooth=1e-6):\n","    \"\"\"\n","    Tversky Loss para segmentação semântica.\n","\n","    Args:\n","        y_true: Máscara verdadeira (shape: [batch, height, width]).\n","        y_pred: Predição do modelo (shape: [batch, height, width, num_classes]).\n","        alpha: Peso para FP (default: 0.7).\n","        beta: Peso para FN (default: 0.3).\n","        smooth: Suavização para evitar divisão por zero.\n","    \"\"\"\n","    # Converte y_true para one-hot encoding se necessário\n","    y_true = tf.one_hot(tf.cast(y_true, tf.int32), depth=tf.shape(y_pred)[-1])\n","    y_true = tf.cast(y_true, y_pred.dtype)  # Garante o mesmo dtype que y_pred\n","\n","    # Achata os tensores\n","    y_true_f = tf.reshape(y_true, [-1])\n","    y_pred_f = tf.reshape(y_pred, [-1])\n","\n","    # Calcula TP, FP, FN\n","    true_pos = tf.reduce_sum(y_true_f * y_pred_f)\n","    false_pos = tf.reduce_sum((1 - y_true_f) * y_pred_f)\n","    false_neg = tf.reduce_sum(y_true_f * (1 - y_pred_f))\n","\n","    # Índice de Tversky\n","    tversky = (true_pos + smooth) / (true_pos + alpha * false_pos + beta * false_neg + smooth)\n","\n","    return 1 - tversky\n","\n","\n","\n","########## Tversky + Focal Loss #########\n","def FocalTverskyLoss(y_true, y_pred, smooth=1e-5, alpha=0.3, beta=0.7, gamma= 1):\n","\n","    if y_pred.shape[-1] == 1:  # Segmentação binária\n","        y_pred = tf.keras.activations.sigmoid(y_pred)\n","    else:  # Segmentação multiclasse\n","        y_pred = tf.keras.activations.softmax(y_pred, axis=-1)\n","        y_true = tf.squeeze(y_true, axis=-1)\n","        y_true = tf.cast(y_true, tf.int32)\n","        y_true = tf.one_hot(y_true, num_classes, axis=-1)\n","\n","    y_true = tf.cast(y_true, tf.float32)\n","    y_pred = tf.cast(y_pred, tf.float32)\n","\n","    # Achatar os tensores\n","    y_true_flat = tf.reshape(y_true, [-1])\n","    y_pred_flat = tf.reshape(y_pred, [-1])\n","\n","    # Cálculo de TP, FP e FN\n","    TP = tf.reduce_sum(y_true_flat * y_pred_flat)\n","    FP = tf.reduce_sum((1 - y_true_flat) * y_pred_flat)\n","    FN = tf.reduce_sum(y_true_flat * (1 - y_pred_flat))\n","\n","    # Índice de Tversky\n","    Tversky = (TP + smooth) / (TP + alpha * FP + beta * FN + smooth)\n","    FocalTversky = tf.pow((1 - Tversky), gamma)\n","\n","    return FocalTversky\n","\n","########## LovaszSoftmax Loss ##########\n","def lovasz_gradient(gt_sorted):\n","    \"\"\"Computes gradient of the Lovasz extension w.r.t sorted errors.\"\"\"\n","    gts = tf.reduce_sum(gt_sorted)\n","    intersection = gts - tf.cumsum(gt_sorted)\n","    union = gts + tf.cumsum(1. - gt_sorted)\n","    jaccard = 1. - intersection / union\n","    jaccard = tf.concat((jaccard[0:1], jaccard[1:] - jaccard[:-1]), axis=0)\n","    return jaccard\n","\n","def flatten_probas(probas, labels, ignore=None):\n","    \"\"\"Flattens predictions and labels.\"\"\"\n","    if len(probas.shape) == 3:\n","        probas = tf.expand_dims(probas, axis=-1)\n","    C = probas.shape[-1]\n","    probas = tf.transpose(probas, (0, 3, 1, 2))\n","    probas = tf.reshape(probas, (-1, C))\n","    labels = tf.reshape(labels, (-1,))\n","    if ignore is None:\n","        return probas, labels\n","    valid = tf.not_equal(labels, ignore)\n","    vprobas = tf.boolean_mask(probas, valid, axis=0)\n","    vlabels = tf.boolean_mask(labels, valid)\n","    return vprobas, vlabels\n","\n","def lovasz_softmax_flat(probas, labels, classes='present'):\n","    \"\"\"Multi-class Lovasz-Softmax loss.\"\"\"\n","    C = probas.shape[1]\n","    losses = []\n","    class_to_sum = list(range(C)) if classes in ['all', 'present'] else classes\n","    for c in class_to_sum:\n","        fg = tf.cast(tf.equal(labels, c), probas.dtype)\n","        class_pred = probas[:, c]\n","        errors = 1.0 - fg * class_pred - (1 - fg) * (1 - class_pred)\n","        errors_sorted, perm = tf.nn.top_k(errors, k=tf.shape(errors)[0], sorted=True)\n","        fg_sorted = tf.gather(fg, perm)\n","        grad = lovasz_gradient(fg_sorted)\n","        loss = tf.tensordot(errors_sorted, tf.stop_gradient(grad), 1)\n","        losses.append(loss)\n","    return tf.reduce_mean(losses) if losses else 0.0\n","\n","def LovaszSoftmaxLoss(y_true, y_pred):\n","    y_true = tf.squeeze(y_true, axis=-1)  # Remove dimensão extra\n","    y_true = tf.cast(y_true, tf.int32)\n","    probas = y_pred\n","    labels = y_true\n","    return lovasz_softmax_flat(*flatten_probas(probas, labels, ignore=None), classes='present')\n","\n","########## Callback IoU ##########\n","class IoUTracker(tf.keras.callbacks.Callback):\n","    def __init__(self, validation_data, num_classes, frequency=1):\n","        super().__init__()\n","        self.validation_data = validation_data\n","        self.num_classes = num_classes\n","        self.frequency = frequency\n","        self.miou_metric = MeanIoU(num_classes=num_classes)\n","\n","    def on_epoch_end(self, epoch, logs=None):\n","        if (epoch + 1) % self.frequency == 0:\n","            X_val, y_val = self.validation_data\n","\n","            # Previsões -> shape (batch, height, width, num_classes)\n","            y_pred = self.model.predict(X_val, verbose=0)\n","\n","            # Converter para classes inteiras e remover dimensão extra\n","            y_pred_labels = np.argmax(y_pred, axis=-1)  # shape (batch, height, width)\n","\n","            # Remover a última dimensão de y_val se existir\n","            y_val_squeezed = np.squeeze(y_val, axis=-1)  # shape (batch, height, width)\n","\n","            # Calcular IoU para cada classe\n","            self.miou_metric.reset_state()\n","            self.miou_metric.update_state(y_val_squeezed, y_pred_labels)\n","            miou = self.miou_metric.result().numpy()\n","\n","            # Calcular IoU por classe manualmente\n","            iou_per_class = []\n","            for class_id in range(self.num_classes):\n","                intersection = np.logical_and(y_val_squeezed == class_id, y_pred_labels == class_id).sum()\n","                union = np.logical_or(y_val_squeezed == class_id, y_pred_labels == class_id).sum()\n","                iou = (intersection + 1e-7) / (union + 1e-7)\n","                iou_per_class.append(iou)\n","\n","            # Adicionar aos logs\n","            logs['val_mean_iou'] = miou\n","            for i, class_iou in enumerate(iou_per_class):\n","                logs[f'val_iou_class_{i}'] = class_iou\n","\n","            # Print formatado\n","            print(f\"\\nEpoch {epoch+1} - Val Mean IoU: {miou:.4f}\")\n","            for class_id, iou in enumerate(iou_per_class):\n","                print(f\"Classe {class_id}: {iou:.4f}\\n\", end=\" | \")"],"metadata":{"id":"RYxCZ2Yj07CK","executionInfo":{"status":"ok","timestamp":1742232926385,"user_tz":180,"elapsed":38,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","execution_count":17,"metadata":{"id":"-UX7023aS5yS","executionInfo":{"status":"ok","timestamp":1742232926395,"user_tz":180,"elapsed":5,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from keras import backend as K\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.models import model_from_json\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.metrics import MeanIoU\n","from tensorflow.keras.utils import to_categorical\n","#from utils import save_dir\n","#from model import Unet\n","\n","################ Carregar os dados ################"]},{"cell_type":"markdown","source":[],"metadata":{"id":"AGKY-2rPK7o6"}},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":472,"status":"ok","timestamp":1742232953228,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"},"user_tz":180},"id":"lgXpfMmVPqZo","outputId":"bf297159-0e6c-4294-f123-1b7526fa8f55"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset carregado de /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data\n"]}],"source":["# Carregar os dadosa\n","X_train, X_val, X_test, y_train, y_val, y_test = load_dataset(save_dir=\"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data\")"]},{"cell_type":"code","source":["################ Calcular Class Weights\n","# Achatar os rótulos de todos os pixels do conjunto de treino\n","all_train_pixels = y_train.flatten()\n","\n","# Calcular frequência das classes\n","classes = np.unique(all_train_pixels)\n","class_weights = class_weight.compute_class_weight(\n","    'balanced',\n","    classes=classes,\n","    y=all_train_pixels\n",")\n","\n","# Criar dicionário de pesos\n","class_weights_dict = {cls: weight for cls, weight in zip(classes, class_weights)}\n","\n","print(\"\\nClass Weights Calculados:\")\n","for cls, weight in class_weights_dict.items():\n","    print(f\"Classe {cls}: {weight:.2f}\")\n","\n","################ Mapear pesos para cada pixel\n","# Criar vetor de pesos para cada pixel (mesma dimensão de y_train)\n","sample_weights = np.zeros_like(y_train, dtype=np.float32)\n","\n","for cls, weight in class_weights_dict.items():\n","    sample_weights[y_train == cls] = weight"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hoTdMhQOPSfW","executionInfo":{"status":"ok","timestamp":1742232962297,"user_tz":180,"elapsed":9068,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"5fd20307-79a5-4bad-ae8a-a745c93d5a42"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Class Weights Calculados:\n","Classe 0: 0.13\n","Classe 1: 0.95\n","Classe 2: 74.41\n","Classe 3: 26.70\n","Classe 4: 6.56\n","Classe 5: 13.92\n","Classe 6: 43.66\n","Classe 7: 6.62\n","Classe 8: 255.40\n"]}]},{"cell_type":"code","source":["flat_labels = y_train.flatten()\n","\n","#Conta as ocorrências em cada classe\n","unique_classes, class_counts = np.unique(flat_labels, return_counts=True)\n","\n","# Calula a porcentagem em cada classe\n","total_pixels = len(flat_labels)\n","class_percentages = (class_counts / total_pixels) * 100\n","\n","print(\"Frequência das classes:\")\n","for class_id, percentage in zip(unique_classes, class_percentages):\n","    print(f\"Class {class_id}: {percentage:.2f}%\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7cdeuLPoPdJI","executionInfo":{"status":"ok","timestamp":1742232941100,"user_tz":180,"elapsed":269,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"dcd091d9-9f30-421e-b5a2-b2660e162fee"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stdout","text":["Frequência das classes:\n","Class 0: 83.23%\n","Class 1: 11.74%\n","Class 2: 0.15%\n","Class 3: 0.42%\n","Class 4: 1.69%\n","Class 5: 0.80%\n","Class 6: 0.25%\n","Class 7: 1.68%\n","Class 8: 0.04%\n"]}]},{"cell_type":"markdown","source":["### data augmentation"],"metadata":{"id":"FTje6SZGjWj_"}},{"cell_type":"code","execution_count":22,"metadata":{"id":"GbsiL9HKwrbL","collapsed":true,"executionInfo":{"status":"ok","timestamp":1742232952699,"user_tz":180,"elapsed":11597,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["#augmentation com image generator\n","\n","image_gen = ImageDataGenerator(\n","    rotation_range=25,            # Rotação aleatória d\n","    width_shift_range=0.2,        # Translação horizontal\n","    height_shift_range=0.2,       # Translação vertical\n","    shear_range=10,                # Cisalhamento\n","    zoom_range=[0.7, 1.3],\n","    fill_mode='constant',          # Preenchimento de regiões em branco após transformação\n","\n",")\n","\n","'''Mesmas transformações para as máscaras, exceto o brilho\n","para não afetar os valores das classes'''\n","\n","mask_gen = ImageDataGenerator(\n","    rotation_range=25,            # Rotação aleatória d\n","    width_shift_range=0.2,        # Translação horizontal\n","    height_shift_range=0.2,       # Translação vertical\n","    shear_range=10,                # Cisalhamento\n","    zoom_range=[0.7, 1.3],\n","    fill_mode='constant',          # Preenchimento de regiões em branco após transformação\n","\n",")\n","\n","#ajustando os geradores para as imagens\n","image_gen.fit(X_train, augment=True)\n","mask_gen.fit(y_train, augment=True)\n","\n","# Instanciando os geradores para mascaras e imagens\n","image_generator = image_gen.flow(X_train, batch_size=16, seed=42)\n","mask_generator = mask_gen.flow(y_train, batch_size=16, seed=42)\n","\n","# Combinando os geradores para gerar lotes com as mesmas transformações\n","train_generator = zip(image_generator, mask_generator)\n","\n","sample_weights_per_image = np.zeros(len(X_train))\n","for i, cls in enumerate(y_train):\n","    class_weights_for_image = class_weight.compute_class_weight('balanced', classes=np.unique(cls), y=cls.flatten())  # Calculate class weights for that image\n","    average_weight = np.mean(class_weights_for_image)\n","    sample_weights_per_image[i] = average_weight\n","\n","def augmenteixons():\n","    for i, (img, mask) in enumerate(train_generator):\n","\n","        batch_indices = image_generator.index_array[i * image_generator.batch_size:(i + 1) * image_generator.batch_size]\n","        batch_sample_weights = sample_weights_per_image[batch_indices]\n","\n","        yield img, mask, batch_sample_weights ]"]},{"cell_type":"markdown","source":["### *compilação e treinamento**\n"],"metadata":{"id":"N7kd99f9jZrt"}},{"cell_type":"code","execution_count":25,"metadata":{"collapsed":true,"id":"MOtBwVi3q4xk","executionInfo":{"status":"ok","timestamp":1742232973421,"user_tz":180,"elapsed":1795,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}}},"outputs":[],"source":["##Compilando #################################################################\n","\n","#parâmetros:\n","input_shape = (256,256, 1)\n","num_classes = 9\n","lr = 1e-5\n","#metrics = [\"accuracy\"]\n","#metrics = [MeanIoU(num_classes=num_classes, name='mean_iou')]\n","#metrics = [\"accuracy\",MeanIoU(num_classes=num_classes, name='mean_iou')]\n","metrics = [\"accuracy\", MeanIoU(num_classes=num_classes, name='mean_iou', sparse_y_true=True, sparse_y_pred=False)]\n","\n","#loss =  keras.losses.SparseCategoricalCrossentropy()\n","#loss = jaccard_loss\n","#loss = dice_coef_loss\n","#loss = FocalLoss\n","#loss = Combo_loss\n","#loss = TverskyLoss\n","#loss = FocalTverskyLoss\n","loss = LovaszSoftmaxLoss\n","\n","model_name = 'AUS_TVKY_FOCAL01'\n","testename = model_name\n","arquivo_modelo = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_{model_name}.keras' # .h não é mais aceito\n","arquivo_modelo_json = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_{model_name}.json'\n","output_dir = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Testes/{testename}'\n","os.makedirs(output_dir, exist_ok=True)\n","\n","model = Unet(num_classes, input_shape)\n","model.compile(optimizer=tf.keras.optimizers.AdamW(learning_rate=lr, weight_decay=1e-4), loss=loss, metrics=metrics)\n","#model.summary()\n","\n","##Callbacks\n","lr_reducer = ReduceLROnPlateau(\n","    monitor='val_loss',     # Monitora a perda de validação\n","    mode='min',\n","    factor=0.2,\n","    patience=5,\n","    min_lr=1e-6,\n","    min_delta=0.001,\n","    verbose=1\n",")\n","early_stopper = EarlyStopping(monitor='val_loss', min_delta=0.9, patience=25, verbose=1, mode='auto')\n","checkpointer = ModelCheckpoint(arquivo_modelo, monitor='val_mean_iou',mode='max',save_best_only=True, verbose=1)\n","\n","# Instancia o IoUCallback passando os dados de validação\n","iou_callback = IoUTracker(\n","    validation_data=(X_val, y_val),\n","    num_classes=num_classes,\n","    frequency=1  # Avaliar a cada época\n",")"]},{"cell_type":"markdown","source":["**treinamento**"],"metadata":{"id":"FyolAnBAjdS4"}},{"cell_type":"code","execution_count":28,"metadata":{"collapsed":true,"id":"aHsztdaiAUNM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742237141846,"user_tz":180,"elapsed":652943,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"182ae682-a74c-417b-dfb1-7e991669d7a3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 999ms/step - accuracy: 0.0751 - loss: 1.6504 - mean_iou: 0.0178\n","Epoch 1: val_mean_iou did not improve from 0.01634\n","\n","Epoch 1 - Val Mean IoU: 0.0162\n","Classe 0: 0.0468\n"," | Classe 1: 0.0499\n"," | Classe 2: 0.0022\n"," | Classe 3: 0.0036\n"," | Classe 4: 0.0221\n"," | Classe 5: 0.0059\n"," | Classe 6: 0.0089\n"," | Classe 7: 0.0065\n"," | Classe 8: 0.0003\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m87s\u001b[0m 2s/step - accuracy: 0.0751 - loss: 1.6527 - mean_iou: 0.0178 - val_accuracy: 0.0541 - val_loss: 1.7327 - val_mean_iou: 0.0162 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0468 - val_iou_class_1: 0.0499 - val_iou_class_2: 0.0022 - val_iou_class_3: 0.0036 - val_iou_class_4: 0.0221 - val_iou_class_5: 0.0059 - val_iou_class_6: 0.0089 - val_iou_class_7: 0.0065 - val_iou_class_8: 3.0534e-04\n","Epoch 2/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 417ms/step - accuracy: 0.0753 - loss: 1.6431 - mean_iou: 0.0181\n","Epoch 2: val_mean_iou did not improve from 0.01634\n","\n","Epoch 2 - Val Mean IoU: 0.0162\n","Classe 0: 0.0434\n"," | Classe 1: 0.0525\n"," | Classe 2: 0.0023\n"," | Classe 3: 0.0033\n"," | Classe 4: 0.0238\n"," | Classe 5: 0.0049\n"," | Classe 6: 0.0082\n"," | Classe 7: 0.0070\n"," | Classe 8: 0.0003\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 498ms/step - accuracy: 0.0753 - loss: 1.6454 - mean_iou: 0.0181 - val_accuracy: 0.0510 - val_loss: 1.7240 - val_mean_iou: 0.0162 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0434 - val_iou_class_1: 0.0525 - val_iou_class_2: 0.0023 - val_iou_class_3: 0.0033 - val_iou_class_4: 0.0238 - val_iou_class_5: 0.0049 - val_iou_class_6: 0.0082 - val_iou_class_7: 0.0070 - val_iou_class_8: 3.0351e-04\n","Epoch 3/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0757 - loss: 1.6361 - mean_iou: 0.0184\n","Epoch 3: val_mean_iou did not improve from 0.01634\n","\n","Epoch 3 - Val Mean IoU: 0.0161\n","Classe 0: 0.0396\n"," | Classe 1: 0.0550\n"," | Classe 2: 0.0025\n"," | Classe 3: 0.0030\n"," | Classe 4: 0.0258\n"," | Classe 5: 0.0041\n"," | Classe 6: 0.0074\n"," | Classe 7: 0.0068\n"," | Classe 8: 0.0003\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0757 - loss: 1.6383 - mean_iou: 0.0184 - val_accuracy: 0.0478 - val_loss: 1.7160 - val_mean_iou: 0.0161 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0396 - val_iou_class_1: 0.0550 - val_iou_class_2: 0.0025 - val_iou_class_3: 0.0030 - val_iou_class_4: 0.0258 - val_iou_class_5: 0.0041 - val_iou_class_6: 0.0074 - val_iou_class_7: 0.0068 - val_iou_class_8: 2.8113e-04\n","Epoch 4/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0759 - loss: 1.6288 - mean_iou: 0.0187\n","Epoch 4: val_mean_iou did not improve from 0.01634\n","\n","Epoch 4 - Val Mean IoU: 0.0160\n","Classe 0: 0.0364\n"," | Classe 1: 0.0571\n"," | Classe 2: 0.0027\n"," | Classe 3: 0.0026\n"," | Classe 4: 0.0280\n"," | Classe 5: 0.0035\n"," | Classe 6: 0.0067\n"," | Classe 7: 0.0065\n"," | Classe 8: 0.0003\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 492ms/step - accuracy: 0.0759 - loss: 1.6311 - mean_iou: 0.0187 - val_accuracy: 0.0451 - val_loss: 1.7084 - val_mean_iou: 0.0160 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0364 - val_iou_class_1: 0.0571 - val_iou_class_2: 0.0027 - val_iou_class_3: 0.0026 - val_iou_class_4: 0.0280 - val_iou_class_5: 0.0035 - val_iou_class_6: 0.0067 - val_iou_class_7: 0.0065 - val_iou_class_8: 2.7120e-04\n","Epoch 5/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - accuracy: 0.0761 - loss: 1.6217 - mean_iou: 0.0189\n","Epoch 5: val_mean_iou did not improve from 0.01634\n","\n","Epoch 5 - Val Mean IoU: 0.0159\n","Classe 0: 0.0342\n"," | Classe 1: 0.0583\n"," | Classe 2: 0.0029\n"," | Classe 3: 0.0023\n"," | Classe 4: 0.0299\n"," | Classe 5: 0.0030\n"," | Classe 6: 0.0058\n"," | Classe 7: 0.0060\n"," | Classe 8: 0.0003\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0761 - loss: 1.6240 - mean_iou: 0.0189 - val_accuracy: 0.0432 - val_loss: 1.7012 - val_mean_iou: 0.0159 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0342 - val_iou_class_1: 0.0583 - val_iou_class_2: 0.0029 - val_iou_class_3: 0.0023 - val_iou_class_4: 0.0299 - val_iou_class_5: 0.0030 - val_iou_class_6: 0.0058 - val_iou_class_7: 0.0060 - val_iou_class_8: 2.5745e-04\n","Epoch 6/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - accuracy: 0.0761 - loss: 1.6145 - mean_iou: 0.0189\n","Epoch 6: val_mean_iou did not improve from 0.01634\n","\n","Epoch 6 - Val Mean IoU: 0.0156\n","Classe 0: 0.0327\n"," | Classe 1: 0.0584\n"," | Classe 2: 0.0030\n"," | Classe 3: 0.0020\n"," | Classe 4: 0.0310\n"," | Classe 5: 0.0026\n"," | Classe 6: 0.0048\n"," | Classe 7: 0.0055\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 496ms/step - accuracy: 0.0761 - loss: 1.6167 - mean_iou: 0.0189 - val_accuracy: 0.0417 - val_loss: 1.6941 - val_mean_iou: 0.0156 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0327 - val_iou_class_1: 0.0584 - val_iou_class_2: 0.0030 - val_iou_class_3: 0.0020 - val_iou_class_4: 0.0310 - val_iou_class_5: 0.0026 - val_iou_class_6: 0.0048 - val_iou_class_7: 0.0055 - val_iou_class_8: 2.3464e-04\n","Epoch 7/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0761 - loss: 1.6074 - mean_iou: 0.0190\n","Epoch 7: val_mean_iou did not improve from 0.01634\n","\n","Epoch 7 - Val Mean IoU: 0.0153\n","Classe 0: 0.0303\n"," | Classe 1: 0.0585\n"," | Classe 2: 0.0031\n"," | Classe 3: 0.0017\n"," | Classe 4: 0.0322\n"," | Classe 5: 0.0023\n"," | Classe 6: 0.0041\n"," | Classe 7: 0.0052\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0761 - loss: 1.6096 - mean_iou: 0.0190 - val_accuracy: 0.0395 - val_loss: 1.6870 - val_mean_iou: 0.0153 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0303 - val_iou_class_1: 0.0585 - val_iou_class_2: 0.0031 - val_iou_class_3: 0.0017 - val_iou_class_4: 0.0322 - val_iou_class_5: 0.0023 - val_iou_class_6: 0.0041 - val_iou_class_7: 0.0052 - val_iou_class_8: 2.2730e-04\n","Epoch 8/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0758 - loss: 1.6001 - mean_iou: 0.0189\n","Epoch 8: val_mean_iou did not improve from 0.01634\n","\n","Epoch 8 - Val Mean IoU: 0.0149\n","Classe 0: 0.0283\n"," | Classe 1: 0.0581\n"," | Classe 2: 0.0033\n"," | Classe 3: 0.0015\n"," | Classe 4: 0.0327\n"," | Classe 5: 0.0020\n"," | Classe 6: 0.0034\n"," | Classe 7: 0.0047\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0758 - loss: 1.6023 - mean_iou: 0.0189 - val_accuracy: 0.0375 - val_loss: 1.6799 - val_mean_iou: 0.0149 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0283 - val_iou_class_1: 0.0581 - val_iou_class_2: 0.0033 - val_iou_class_3: 0.0015 - val_iou_class_4: 0.0327 - val_iou_class_5: 0.0020 - val_iou_class_6: 0.0034 - val_iou_class_7: 0.0047 - val_iou_class_8: 2.1343e-04\n","Epoch 9/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0754 - loss: 1.5928 - mean_iou: 0.0188\n","Epoch 9: val_mean_iou did not improve from 0.01634\n","\n","Epoch 9 - Val Mean IoU: 0.0144\n","Classe 0: 0.0262\n"," | Classe 1: 0.0578\n"," | Classe 2: 0.0033\n"," | Classe 3: 0.0013\n"," | Classe 4: 0.0317\n"," | Classe 5: 0.0019\n"," | Classe 6: 0.0029\n"," | Classe 7: 0.0044\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 497ms/step - accuracy: 0.0754 - loss: 1.5950 - mean_iou: 0.0188 - val_accuracy: 0.0355 - val_loss: 1.6725 - val_mean_iou: 0.0144 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0262 - val_iou_class_1: 0.0578 - val_iou_class_2: 0.0033 - val_iou_class_3: 0.0013 - val_iou_class_4: 0.0317 - val_iou_class_5: 0.0019 - val_iou_class_6: 0.0029 - val_iou_class_7: 0.0044 - val_iou_class_8: 1.9381e-04\n","Epoch 10/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - accuracy: 0.0749 - loss: 1.5854 - mean_iou: 0.0187\n","Epoch 10: val_mean_iou did not improve from 0.01634\n","\n","Epoch 10 - Val Mean IoU: 0.0141\n","Classe 0: 0.0247\n"," | Classe 1: 0.0583\n"," | Classe 2: 0.0035\n"," | Classe 3: 0.0012\n"," | Classe 4: 0.0303\n"," | Classe 5: 0.0017\n"," | Classe 6: 0.0025\n"," | Classe 7: 0.0041\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0749 - loss: 1.5877 - mean_iou: 0.0187 - val_accuracy: 0.0341 - val_loss: 1.6651 - val_mean_iou: 0.0141 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0247 - val_iou_class_1: 0.0583 - val_iou_class_2: 0.0035 - val_iou_class_3: 0.0012 - val_iou_class_4: 0.0303 - val_iou_class_5: 0.0017 - val_iou_class_6: 0.0025 - val_iou_class_7: 0.0041 - val_iou_class_8: 2.0264e-04\n","Epoch 11/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0742 - loss: 1.5780 - mean_iou: 0.0186\n","Epoch 11: val_mean_iou did not improve from 0.01634\n","\n","Epoch 11 - Val Mean IoU: 0.0138\n","Classe 0: 0.0237\n"," | Classe 1: 0.0597\n"," | Classe 2: 0.0036\n"," | Classe 3: 0.0011\n"," | Classe 4: 0.0283\n"," | Classe 5: 0.0016\n"," | Classe 6: 0.0023\n"," | Classe 7: 0.0041\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0741 - loss: 1.5803 - mean_iou: 0.0186 - val_accuracy: 0.0333 - val_loss: 1.6574 - val_mean_iou: 0.0138 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0237 - val_iou_class_1: 0.0597 - val_iou_class_2: 0.0036 - val_iou_class_3: 0.0011 - val_iou_class_4: 0.0283 - val_iou_class_5: 0.0016 - val_iou_class_6: 0.0023 - val_iou_class_7: 0.0041 - val_iou_class_8: 2.1647e-04\n","Epoch 12/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0736 - loss: 1.5705 - mean_iou: 0.0186\n","Epoch 12: val_mean_iou did not improve from 0.01634\n","\n","Epoch 12 - Val Mean IoU: 0.0138\n","Classe 0: 0.0229\n"," | Classe 1: 0.0614\n"," | Classe 2: 0.0038\n"," | Classe 3: 0.0010\n"," | Classe 4: 0.0271\n"," | Classe 5: 0.0016\n"," | Classe 6: 0.0020\n"," | Classe 7: 0.0041\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0736 - loss: 1.5728 - mean_iou: 0.0186 - val_accuracy: 0.0329 - val_loss: 1.6498 - val_mean_iou: 0.0138 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0229 - val_iou_class_1: 0.0614 - val_iou_class_2: 0.0038 - val_iou_class_3: 0.0010 - val_iou_class_4: 0.0271 - val_iou_class_5: 0.0016 - val_iou_class_6: 0.0020 - val_iou_class_7: 0.0041 - val_iou_class_8: 2.3227e-04\n","Epoch 13/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0729 - loss: 1.5629 - mean_iou: 0.0186\n","Epoch 13: val_mean_iou did not improve from 0.01634\n","\n","Epoch 13 - Val Mean IoU: 0.0139\n","Classe 0: 0.0224\n"," | Classe 1: 0.0637\n"," | Classe 2: 0.0039\n"," | Classe 3: 0.0010\n"," | Classe 4: 0.0265\n"," | Classe 5: 0.0015\n"," | Classe 6: 0.0019\n"," | Classe 7: 0.0040\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0728 - loss: 1.5652 - mean_iou: 0.0186 - val_accuracy: 0.0329 - val_loss: 1.6420 - val_mean_iou: 0.0139 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0224 - val_iou_class_1: 0.0637 - val_iou_class_2: 0.0039 - val_iou_class_3: 9.6159e-04 - val_iou_class_4: 0.0265 - val_iou_class_5: 0.0015 - val_iou_class_6: 0.0019 - val_iou_class_7: 0.0040 - val_iou_class_8: 2.3471e-04\n","Epoch 14/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 414ms/step - accuracy: 0.0719 - loss: 1.5554 - mean_iou: 0.0185\n","Epoch 14: val_mean_iou did not improve from 0.01634\n","\n","Epoch 14 - Val Mean IoU: 0.0141\n","Classe 0: 0.0218\n"," | Classe 1: 0.0664\n"," | Classe 2: 0.0040\n"," | Classe 3: 0.0010\n"," | Classe 4: 0.0264\n"," | Classe 5: 0.0015\n"," | Classe 6: 0.0017\n"," | Classe 7: 0.0039\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 494ms/step - accuracy: 0.0719 - loss: 1.5576 - mean_iou: 0.0185 - val_accuracy: 0.0329 - val_loss: 1.6343 - val_mean_iou: 0.0141 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0218 - val_iou_class_1: 0.0664 - val_iou_class_2: 0.0040 - val_iou_class_3: 9.8319e-04 - val_iou_class_4: 0.0264 - val_iou_class_5: 0.0015 - val_iou_class_6: 0.0017 - val_iou_class_7: 0.0039 - val_iou_class_8: 2.3258e-04\n","Epoch 15/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0708 - loss: 1.5477 - mean_iou: 0.0185\n","Epoch 15: val_mean_iou did not improve from 0.01634\n","\n","Epoch 15 - Val Mean IoU: 0.0144\n","Classe 0: 0.0214\n"," | Classe 1: 0.0692\n"," | Classe 2: 0.0041\n"," | Classe 3: 0.0010\n"," | Classe 4: 0.0268\n"," | Classe 5: 0.0015\n"," | Classe 6: 0.0016\n"," | Classe 7: 0.0037\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 494ms/step - accuracy: 0.0708 - loss: 1.5499 - mean_iou: 0.0185 - val_accuracy: 0.0332 - val_loss: 1.6264 - val_mean_iou: 0.0144 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0214 - val_iou_class_1: 0.0692 - val_iou_class_2: 0.0041 - val_iou_class_3: 0.0010 - val_iou_class_4: 0.0268 - val_iou_class_5: 0.0015 - val_iou_class_6: 0.0016 - val_iou_class_7: 0.0037 - val_iou_class_8: 2.3398e-04\n","Epoch 16/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0696 - loss: 1.5399 - mean_iou: 0.0185\n","Epoch 16: val_mean_iou did not improve from 0.01634\n","\n","Epoch 16 - Val Mean IoU: 0.0147\n","Classe 0: 0.0209\n"," | Classe 1: 0.0723\n"," | Classe 2: 0.0042\n"," | Classe 3: 0.0011\n"," | Classe 4: 0.0275\n"," | Classe 5: 0.0014\n"," | Classe 6: 0.0015\n"," | Classe 7: 0.0035\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 495ms/step - accuracy: 0.0695 - loss: 1.5421 - mean_iou: 0.0185 - val_accuracy: 0.0335 - val_loss: 1.6184 - val_mean_iou: 0.0147 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0209 - val_iou_class_1: 0.0723 - val_iou_class_2: 0.0042 - val_iou_class_3: 0.0011 - val_iou_class_4: 0.0275 - val_iou_class_5: 0.0014 - val_iou_class_6: 0.0015 - val_iou_class_7: 0.0035 - val_iou_class_8: 2.3702e-04\n","Epoch 17/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0679 - loss: 1.5320 - mean_iou: 0.0184\n","Epoch 17: val_mean_iou did not improve from 0.01634\n","\n","Epoch 17 - Val Mean IoU: 0.0150\n","Classe 0: 0.0202\n"," | Classe 1: 0.0761\n"," | Classe 2: 0.0043\n"," | Classe 3: 0.0012\n"," | Classe 4: 0.0268\n"," | Classe 5: 0.0014\n"," | Classe 6: 0.0015\n"," | Classe 7: 0.0033\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0679 - loss: 1.5342 - mean_iou: 0.0184 - val_accuracy: 0.0338 - val_loss: 1.6102 - val_mean_iou: 0.0150 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0202 - val_iou_class_1: 0.0761 - val_iou_class_2: 0.0043 - val_iou_class_3: 0.0012 - val_iou_class_4: 0.0268 - val_iou_class_5: 0.0014 - val_iou_class_6: 0.0015 - val_iou_class_7: 0.0033 - val_iou_class_8: 2.3084e-04\n","Epoch 18/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0662 - loss: 1.5241 - mean_iou: 0.0183\n","Epoch 18: val_mean_iou did not improve from 0.01634\n","\n","Epoch 18 - Val Mean IoU: 0.0153\n","Classe 0: 0.0195\n"," | Classe 1: 0.0798\n"," | Classe 2: 0.0044\n"," | Classe 3: 0.0014\n"," | Classe 4: 0.0267\n"," | Classe 5: 0.0014\n"," | Classe 6: 0.0014\n"," | Classe 7: 0.0031\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0661 - loss: 1.5263 - mean_iou: 0.0183 - val_accuracy: 0.0342 - val_loss: 1.6019 - val_mean_iou: 0.0153 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0195 - val_iou_class_1: 0.0798 - val_iou_class_2: 0.0044 - val_iou_class_3: 0.0014 - val_iou_class_4: 0.0267 - val_iou_class_5: 0.0014 - val_iou_class_6: 0.0014 - val_iou_class_7: 0.0031 - val_iou_class_8: 2.2567e-04\n","Epoch 19/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0641 - loss: 1.5158 - mean_iou: 0.0182\n","Epoch 19: val_mean_iou did not improve from 0.01634\n","\n","Epoch 19 - Val Mean IoU: 0.0157\n","Classe 0: 0.0186\n"," | Classe 1: 0.0839\n"," | Classe 2: 0.0046\n"," | Classe 3: 0.0017\n"," | Classe 4: 0.0263\n"," | Classe 5: 0.0014\n"," | Classe 6: 0.0013\n"," | Classe 7: 0.0029\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 493ms/step - accuracy: 0.0641 - loss: 1.5180 - mean_iou: 0.0182 - val_accuracy: 0.0345 - val_loss: 1.5932 - val_mean_iou: 0.0157 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0186 - val_iou_class_1: 0.0839 - val_iou_class_2: 0.0046 - val_iou_class_3: 0.0017 - val_iou_class_4: 0.0263 - val_iou_class_5: 0.0014 - val_iou_class_6: 0.0013 - val_iou_class_7: 0.0029 - val_iou_class_8: 2.3144e-04\n","Epoch 20/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0622 - loss: 1.5076 - mean_iou: 0.0181\n","Epoch 20: val_mean_iou did not improve from 0.01634\n","\n","Epoch 20 - Val Mean IoU: 0.0160\n","Classe 0: 0.0174\n"," | Classe 1: 0.0881\n"," | Classe 2: 0.0047\n"," | Classe 3: 0.0019\n"," | Classe 4: 0.0263\n"," | Classe 5: 0.0015\n"," | Classe 6: 0.0013\n"," | Classe 7: 0.0027\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m22s\u001b[0m 492ms/step - accuracy: 0.0621 - loss: 1.5098 - mean_iou: 0.0181 - val_accuracy: 0.0345 - val_loss: 1.5845 - val_mean_iou: 0.0160 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0174 - val_iou_class_1: 0.0881 - val_iou_class_2: 0.0047 - val_iou_class_3: 0.0019 - val_iou_class_4: 0.0263 - val_iou_class_5: 0.0015 - val_iou_class_6: 0.0013 - val_iou_class_7: 0.0027 - val_iou_class_8: 2.0832e-04\n","Epoch 21/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0601 - loss: 1.4991 - mean_iou: 0.0179\n","Epoch 21: val_mean_iou improved from 0.01634 to 0.01644, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 21 - Val Mean IoU: 0.0164\n","Classe 0: 0.0163\n"," | Classe 1: 0.0922\n"," | Classe 2: 0.0050\n"," | Classe 3: 0.0021\n"," | Classe 4: 0.0267\n"," | Classe 5: 0.0016\n"," | Classe 6: 0.0012\n"," | Classe 7: 0.0027\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 532ms/step - accuracy: 0.0601 - loss: 1.5013 - mean_iou: 0.0179 - val_accuracy: 0.0347 - val_loss: 1.5758 - val_mean_iou: 0.0164 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0163 - val_iou_class_1: 0.0922 - val_iou_class_2: 0.0050 - val_iou_class_3: 0.0021 - val_iou_class_4: 0.0267 - val_iou_class_5: 0.0016 - val_iou_class_6: 0.0012 - val_iou_class_7: 0.0027 - val_iou_class_8: 1.8783e-04\n","Epoch 22/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0582 - loss: 1.4907 - mean_iou: 0.0179\n","Epoch 22: val_mean_iou improved from 0.01644 to 0.01669, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 22 - Val Mean IoU: 0.0167\n","Classe 0: 0.0154\n"," | Classe 1: 0.0949\n"," | Classe 2: 0.0054\n"," | Classe 3: 0.0022\n"," | Classe 4: 0.0266\n"," | Classe 5: 0.0017\n"," | Classe 6: 0.0012\n"," | Classe 7: 0.0027\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 532ms/step - accuracy: 0.0581 - loss: 1.4928 - mean_iou: 0.0179 - val_accuracy: 0.0348 - val_loss: 1.5667 - val_mean_iou: 0.0167 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0154 - val_iou_class_1: 0.0949 - val_iou_class_2: 0.0054 - val_iou_class_3: 0.0022 - val_iou_class_4: 0.0266 - val_iou_class_5: 0.0017 - val_iou_class_6: 0.0012 - val_iou_class_7: 0.0027 - val_iou_class_8: 1.7470e-04\n","Epoch 23/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 413ms/step - accuracy: 0.0563 - loss: 1.4820 - mean_iou: 0.0178\n","Epoch 23: val_mean_iou improved from 0.01669 to 0.01688, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 23 - Val Mean IoU: 0.0169\n","Classe 0: 0.0143\n"," | Classe 1: 0.0965\n"," | Classe 2: 0.0058\n"," | Classe 3: 0.0023\n"," | Classe 4: 0.0272\n"," | Classe 5: 0.0017\n"," | Classe 6: 0.0011\n"," | Classe 7: 0.0027\n"," | Classe 8: 0.0002\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 533ms/step - accuracy: 0.0563 - loss: 1.4842 - mean_iou: 0.0178 - val_accuracy: 0.0346 - val_loss: 1.5579 - val_mean_iou: 0.0169 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0143 - val_iou_class_1: 0.0965 - val_iou_class_2: 0.0058 - val_iou_class_3: 0.0023 - val_iou_class_4: 0.0272 - val_iou_class_5: 0.0017 - val_iou_class_6: 0.0011 - val_iou_class_7: 0.0027 - val_iou_class_8: 1.5336e-04\n","Epoch 24/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0546 - loss: 1.4732 - mean_iou: 0.0177\n","Epoch 24: val_mean_iou improved from 0.01688 to 0.01718, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 24 - Val Mean IoU: 0.0172\n","Classe 0: 0.0132\n"," | Classe 1: 0.0983\n"," | Classe 2: 0.0061\n"," | Classe 3: 0.0025\n"," | Classe 4: 0.0287\n"," | Classe 5: 0.0018\n"," | Classe 6: 0.0010\n"," | Classe 7: 0.0029\n"," | Classe 8: 0.0001\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 534ms/step - accuracy: 0.0546 - loss: 1.4754 - mean_iou: 0.0178 - val_accuracy: 0.0344 - val_loss: 1.5492 - val_mean_iou: 0.0172 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0132 - val_iou_class_1: 0.0983 - val_iou_class_2: 0.0061 - val_iou_class_3: 0.0025 - val_iou_class_4: 0.0287 - val_iou_class_5: 0.0018 - val_iou_class_6: 0.0010 - val_iou_class_7: 0.0029 - val_iou_class_8: 1.4860e-04\n","Epoch 25/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0530 - loss: 1.4642 - mean_iou: 0.0178\n","Epoch 25: val_mean_iou improved from 0.01718 to 0.01739, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 25 - Val Mean IoU: 0.0174\n","Classe 0: 0.0121\n"," | Classe 1: 0.0993\n"," | Classe 2: 0.0065\n"," | Classe 3: 0.0026\n"," | Classe 4: 0.0300\n"," | Classe 5: 0.0019\n"," | Classe 6: 0.0010\n"," | Classe 7: 0.0030\n"," | Classe 8: 0.0001\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 532ms/step - accuracy: 0.0530 - loss: 1.4663 - mean_iou: 0.0178 - val_accuracy: 0.0342 - val_loss: 1.5407 - val_mean_iou: 0.0174 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0121 - val_iou_class_1: 0.0993 - val_iou_class_2: 0.0065 - val_iou_class_3: 0.0026 - val_iou_class_4: 0.0300 - val_iou_class_5: 0.0019 - val_iou_class_6: 9.6861e-04 - val_iou_class_7: 0.0030 - val_iou_class_8: 1.2917e-04\n","Epoch 26/150\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 412ms/step - accuracy: 0.0518 - loss: 1.4553 - mean_iou: 0.0179\n","Epoch 26: val_mean_iou improved from 0.01739 to 0.01764, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_AUS_TVKY_FOCAL01.keras\n","\n","Epoch 26 - Val Mean IoU: 0.0176\n","Classe 0: 0.0114\n"," | Classe 1: 0.1005\n"," | Classe 2: 0.0067\n"," | Classe 3: 0.0027\n"," | Classe 4: 0.0313\n"," | Classe 5: 0.0019\n"," | Classe 6: 0.0009\n"," | Classe 7: 0.0032\n"," | Classe 8: 0.0001\n","\u001b[1m45/45\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m24s\u001b[0m 532ms/step - accuracy: 0.0518 - loss: 1.4574 - mean_iou: 0.0179 - val_accuracy: 0.0341 - val_loss: 1.5319 - val_mean_iou: 0.0176 - learning_rate: 1.0000e-05 - val_iou_class_0: 0.0114 - val_iou_class_1: 0.1005 - val_iou_class_2: 0.0067 - val_iou_class_3: 0.0027 - val_iou_class_4: 0.0313 - val_iou_class_5: 0.0019 - val_iou_class_6: 9.4255e-04 - val_iou_class_7: 0.0032 - val_iou_class_8: 1.0255e-04\n","Epoch 26: early stopping\n"]}],"source":["## Data augmentation   ======================================\n","use_augmentation = False\n","\n","if use_augmentation:\n","\n","  ## Treinamento com augmentation ========================'\n","  history = model.fit(augmenteixons(),\n","                      steps_per_epoch=len(X_train) // 16,\n","                      verbose=1,\n","                      epochs = 200,\n","                      validation_data=(X_val, y_val),\n","                      callbacks=[checkpointer, iou_callback],\n","                      shuffle=False)\n","\n","else:\n","  ## Treinamento sem augmentation ========================'\n","  history = model.fit(X_train, y_train,\n","                    batch_size=16,\n","                    verbose=1,\n","                    epochs=150,\n","                    validation_data=(X_val, y_val),\n","                    callbacks=[lr_reducer, checkpointer, iou_callback, early_stopper],\n","                    sample_weight=sample_weights,\n","                    shuffle=False)"]},{"cell_type":"markdown","metadata":{"id":"p1t394iZIcVG"},"source":["##Avaliação"]},{"source":["\"\"\"##Avaliação\"\"\"\n","\n","results = model.evaluate(X_test, y_test)\n","loss, acc, iou = results[0], results[1], results[2]\n","\n","\n","print(\"Accuracy is = \", (acc * 100.0), \"%\")\n","\n","##Plota a loss e accuracy de treino e validação a acda época\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, 'y', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","\n","output_path = os.path.join(output_dir, f\"train_val_loss.png\")\n","plt.savefig(output_path, bbox_inches='tight')\n","plt.show()\n","plt.close()\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","plt.plot(epochs, acc, 'y', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Training and validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","output_path = os.path.join(output_dir, f\"train_val_acc.png\")\n","plt.savefig(output_path, bbox_inches='tight')\n","plt.show()\n","plt.close()\n","\n","iou = history.history['mean_iou']\n","val_acc = history.history['val_mean_iou']\n","plt.plot(epochs, acc, 'y', label='Training IoU')\n","plt.plot(epochs, val_acc, 'r', label='Validation IoU')\n","plt.title('Training and validation IoU')\n","plt.xlabel('Epochs')\n","plt.ylabel('IoU')\n","plt.legend()\n","\n","output_path = os.path.join(output_dir, f\"train_val_IoU.png\")\n","plt.savefig(output_path, bbox_inches='tight')\n","plt.show()\n","plt.close()"],"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"iDfgW0EOOnqV","executionInfo":{"status":"ok","timestamp":1742220757898,"user_tz":180,"elapsed":7458,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"d638fe57-9a95-40ea-f227-9913d9faa4ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 1s/step - accuracy: 0.1052 - loss: 2.1638 - mean_iou: 0.0208\n","Accuracy is =  10.507596284151077 %\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"V-KdDIB1qlQA"},"source":["# Testes"]},{"cell_type":"code","source":["import numpy as np\n","import os\n","from keras.models import load_model\n","from keras.metrics import MeanIoU\n","from keras.utils import to_categorical\n","#from utils import gen_dict_cores, onehot_to_rgb, load_dataset\n","import cv2\n","\n","\n","#model_name = 'RUS_01'\n","#model = load_model(f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_{model_name}.keras')\n","model = load_model(f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_{model_name}.keras', custom_objects={'TverskyLoss': TverskyLoss, 'FocalTverskyLoss': FocalTverskyLoss})\n","print(\"X_test shape:\", X_test.shape)\n","print(\"y_test shape:\", y_test.shape)\n","\n","#predição do conjunto de teste\n","y_pred=model.predict(X_test)\n","y_pred_argmax=np.argmax(y_pred, axis=3)\n","\n","####### avaliando pela metrica \"intersection over union\" no conjunto de teste ##\n","from keras.metrics import MeanIoU\n","n_classes = 9\n","IOU_keras = MeanIoU(num_classes=n_classes)\n","IOU_keras.update_state(y_test[:,:,:,0], y_pred_argmax)\n","\n","print(\"Mean IoU TESTE =\", IOU_keras.result().numpy())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L5XOG8N9m2Is","executionInfo":{"status":"ok","timestamp":1742220796042,"user_tz":180,"elapsed":6593,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"c3b24bd2-3752-4c94-9c02-c14c4b952a99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["X_test shape: (93, 256, 256, 1)\n","y_test shape: (93, 256, 256, 1)\n","\u001b[1m2/3\u001b[0m \u001b[32m━━━━━━━━━━━━━\u001b[0m\u001b[37m━━━━━━━\u001b[0m \u001b[1m0s\u001b[0m 266ms/step"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 603 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7ddcbd908cc0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step\n","Mean IoU TESTE = 0.12389057\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2GV01_pDcHAj","colab":{"base_uri":"https://localhost:8080/","height":332},"executionInfo":{"status":"ok","timestamp":1742220799888,"user_tz":180,"elapsed":272,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"e94a031b-7b83-4a46-cd58-1197d0072a3c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 3 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["######## Visualizando um exemplar do conjunto de teste\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","dictCores = gen_dict_cores()\n","\n","# Seleciona um índice aleatório do conjunto de teste\n","random_idx = np.random.randint(0, len(X_test))\n","\n","# Seleciona a imagem, a máscara e a predição correspondentes\n","img = X_test[random_idx]\n","mask = y_test[random_idx]\n","pred = y_pred[random_idx]\n","\n","# Mostra a imagem original, a máscara e a predição\n","plt.figure(figsize=(12, 4))\n","\n","# Imagem original\n","plt.subplot(1, 3, 1)\n","plt.imshow(img, cmap='gray')\n","plt.title(\"Imagem Original\")\n","plt.axis('off')\n","\n","# Máscara\n","plt.subplot(1, 3, 2)\n","plt.imshow(onehot_to_rgb(to_categorical(mask, num_classes = 9), dictCores))\n","plt.title(\"Ground Truth\")\n","plt.axis('off')\n","plt.xlabel(all_maskname[random_idx])\n","\n","# Predição\n","plt.subplot(1, 3, 3)\n","plt.imshow(onehot_to_rgb(pred, dictCores), cmap='gray')\n","plt.title(\"Predição\")\n","plt.axis('off')\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"RXrDnwi9eTs6"},"source":["**Salvando todas as predições:**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hv_0GFcQc3-Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742220832789,"user_tz":180,"elapsed":20788,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"3f1ac7e1-f60d-4b1d-8187-ca6b872254fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Todas as imagens foram salvas em: /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Testes/AUS_TVKY_FOCAL_GAN\n"]}],"source":["###### Salvando todas as predições ##################################\n","\n","#testename = \"RUS_01\"\n","#output_dir = f'Testes/{testename}'\n","#os.makedirs(output_dir, exist_ok=True)  # Cria o diretório, se não existir\n","dictCores = gen_dict_cores()\n","\n","# Itera sobre todo o conjunto de teste\n","for idx in range(len(X_test)):\n","    # Seleciona a imagem, a máscara e a predição correspondentes\n","    img = X_test[idx]\n","    mask = y_test[idx]\n","    pred = y_pred[idx]\n","\n","    # Cria o plot\n","    plt.figure(figsize=(12, 4))\n","\n","    # Imagem original\n","    plt.subplot(1, 3, 1)\n","    plt.imshow(img, cmap='gray')\n","    plt.title(\"Imagem Original\")\n","    plt.axis('off')\n","\n","    # Máscara\n","    plt.subplot(1, 3, 2)\n","    plt.imshow(onehot_to_rgb(to_categorical(mask, num_classes=9), dictCores))\n","    plt.title(\"Ground Truth\")\n","    plt.axis('off')\n","\n","    # Predição\n","    plt.subplot(1, 3, 3)\n","    plt.imshow(onehot_to_rgb(pred, dictCores), cmap='gray')\n","    plt.title(\"Predição\")\n","    plt.axis('off')\n","\n","\n","    # Salva o plot no diretório\n","    output_path = os.path.join(output_dir, f\"plot_{idx}.png\")\n","    plt.savefig(output_path, bbox_inches='tight')\n","    plt.close()\n","\n","print(f\"Todas as imagens foram salvas em: {output_dir}\")"]},{"cell_type":"markdown","metadata":{"id":"pI_Q3EetdFo9"},"source":["# Main"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_UXawXlIUjnw"},"outputs":[],"source":["\n","import numpy as np\n","import tensorflow as tf\n","import cv2\n","from PIL import Image\n","import gradio as gr\n","from tensorflow.keras.models import load_model\n","\n","model = load_model('/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_01_UnetUS.keras')\n","\n","def gen_dict_cores_labels():\n","    mask_dict = {\n","        (0, 0, 0): (0, \"Fundo\"),             # Preto = None\n","        (100, 0, 100): (1, \"Figado\"),        # Violeta = Liver (fígado)\n","        (255, 255, 255): (2, \"Osso\"),       # Branco = Bone (Osso)\n","        (0, 255, 0): (3, \"Vesicula biliar\"),    # Verde = Gallbladder (Vesícula biliar)\n","        (255, 255, 0): (4, \"Rim\"),       # Amarelo = Kidney (Rins)\n","        (0, 0, 255): (5, \"Pancreas\"),       # Azul = Pancreas\n","        (255, 0, 0): (6, \"Veia\"),        # Vermelho = Vessels (Veias)\n","        (255, 0, 255): (7, \"Baço\"),       # Rosa = Spleen (Baço)\n","        (0, 255, 255): (8, \"Gland. Adrenal\")       # Azul claro = Adrenal (Glândula Adrenal)\n","    }\n","    return mask_dict\n","\n","# Função para converter de one-hot para RGB e identificar classes\n","def onehot_to_rgb_labels(oneHot, dictCoresLabels):\n","    oneHot = np.array(oneHot)\n","    oneHot = np.argmax(oneHot, axis=-1)\n","    output = np.zeros(oneHot.shape + (3,))  # Cria a matriz RGB de saída\n","    present_classes = set()\n","\n","    for color, (_, label) in dictCoresLabels.items():\n","        mask = oneHot == _ # Ajustado para evitar erro\n","        output[mask] = color\n","        if np.any(mask):\n","            present_classes.add(label)\n","\n","    return np.uint8(output), list(present_classes)\n","\n","# Função para criar legenda em HTML com nomes e cores\n","def create_legend_html(present_labels, dictCoresLabels):\n","    legend_html = \"<ul style='list-style-type:none; padding:0;'>\"\n","    for color, (_, label) in dictCoresLabels.items():\n","        if label in present_labels:\n","            color_hex = f\"rgb{color}\"  # Converte a cor para o formato RGB\n","            legend_html += f\"<li style='color:{color_hex}; font-weight:bold;'>{label}</li>\"\n","    legend_html += \"</ul>\"\n","    return legend_html\n","\n","def predictmask_legend(image):\n","    dictCoresLabels = gen_dict_cores_labels()\n","\n","    original_size = image.size\n","    image_resized = preprocess_image(image)\n","\n","    y_pred = model.predict(image_resized)\n","    y_pred = y_pred[0]\n","\n","    # Converte a predição para RGB e identifica os rótulos\n","    y_pred_rgb, labels = onehot_to_rgb_labels(y_pred, dictCoresLabels)\n","\n","    # Redimensiona a máscara para o tamanho original da imagem\n","    y_pred_resized = cv2.resize(y_pred_rgb, original_size, interpolation=cv2.INTER_NEAREST)\n","    image_original_rgb = image.convert(\"RGB\")\n","\n","    # Combina a imagem original com a máscara\n","    alpha = 0.7\n","    image_combined = cv2.addWeighted(np.array(image_original_rgb), 1 - alpha, y_pred_resized, alpha, 0)\n","    legend_html = create_legend_html(labels, dictCoresLabels) #gera legenda\n","\n","    return Image.fromarray(np.uint8(image_combined)), legend_html\n","\n","def preprocess_image(image):\n","\n","    image_resized = cv2.resize(np.array(image), (256, 256))\n","    image_resized = cv2.cvtColor(image_resized, cv2.COLOR_BGR2GRAY)\n","\n","    # Normaliza e add batchdim\n","    image_resized = image_resized.astype('float32') / 255.0\n","    image_resized = np.expand_dims(image_resized, axis=0)\n","\n","    # Adiciona uma dimensão extra p/ canal de cor\n","    image_resized = np.expand_dims(image_resized, axis=-1)\n","\n","    return image_resized\n","\n","# Interface Gradio\n","interface = gr.Interface(\n","    fn=predictmask_legend,   # Função para predição e legendas\n","    inputs=gr.Image(type=\"pil\", label=\"Carregue uma imagem\"),  # Entrada de imagem\n","    outputs=[\n","        gr.Image(type=\"pil\", label=\"Imagem Segmentada\"),  # Saída da imagem com sobreposição\n","        gr.HTML(label=\"Legenda dos Órgãos Detectados\")                # Saída em HTML para legenda colorida\n","    ],\n","    title=\"Segmentador de Ultrassom Abdominal\",         # Título da interface\n","    description=\"Carregue uma ultrassonografia de cavidade abdominal para identificar os órgãos.\"\n",")\n","\n","interface.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1eDlndkc_UOJ"},"outputs":[],"source":["!pip install gradio"]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","machine_shape":"hm","mount_file_id":"1ejEaIi4mP7B2CIysDRWSmi88wbQwkjEP","authorship_tag":"ABX9TyOst1pJ/mFViRKQH/hLZf/l"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}