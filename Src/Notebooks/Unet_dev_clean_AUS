{"cells":[{"cell_type":"markdown","metadata":{"id":"dUdxPPoj_xJt"},"source":["#Implementação da arquitetura"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2EfJXSXr_wLl"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras import  Model\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.models import model_from_json\n","from tensorflow.keras.losses import SparseCategoricalCrossentropy\n","from tensorflow.keras.metrics import MeanIoU\n","from keras import backend as K"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"ti34ecER24Fg"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CZ_m9NBBE8CL"},"outputs":[],"source":["# Bloco convolucional utilizado em todas as etapas\n","def ConvBlock(tensor, num_feature):\n","\n","  x = tf.keras.layers.Conv2D(num_feature, (3,3), activation='relu', kernel_initializer='he_normal',padding='same')(tensor)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","  x = tf.keras.layers.Dropout(0.1)(x)\n","  x = tf.keras.layers.Conv2D(num_feature, (3,3), activation='relu', kernel_initializer='he_normal',padding='same')(x)\n","  x = tf.keras.layers.BatchNormalization()(x)\n","\n","  return x\n","\n","def ponte(tensor, num_feature):\n","  x = ConvBlock(tensor,num_feature)\n","  return x"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Hl7j_iE0HT19"},"outputs":[],"source":["# Seção encoder\n","def encoder_block(tensor, num_feature):\n","  x = ConvBlock(tensor, num_feature)\n","  p = tf.keras.layers.MaxPooling2D((2,2))(x)\n","  return x, p\n","\n","#seção decoder\n","def decoder_block(tensor,skip_connection, num_feature):\n","  x = tf.keras.layers.Conv2DTranspose(num_feature, (2,2), strides=(2,2), padding='same')(tensor) #recebe do bloco anterior e faz upsampling\n","  x = tf.keras.layers.concatenate([x, skip_connection])\n","  x = ConvBlock(x, num_feature)\n","  return x"]},{"cell_type":"markdown","metadata":{"id":"IFhjCQekb5bH"},"source":["### estrutura da u-net"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qbs35TPaYqOQ"},"outputs":[],"source":["\n","def Unet(n_classes, tensor_shape):\n","\n","  input = tf.keras.layers.Input(tensor_shape) #instancia o tensor para os dados de entrada\n","\n","  #seção de contração:\n","  skip1, c1 = encoder_block(input,16) # 128x128x3 > 64x64x16\n","  skip2, c2 = encoder_block(c1,32) # 64x64x16 > 32x32x32\n","  skip3, c3 = encoder_block(c2,64) # 32x32x32 > 16x16x64\n","  skip4, c4 = encoder_block(c3,128) # 16x16x64 > 8x8x64\n","\n","  #bottleneck\n","  c5 = ponte(c4,256) # 8x8x64 > 8x8x256\n","\n","  #seção de expansão:\n","  c6 = decoder_block(c5, skip4, 128) #8x8x256 > 16x16x128\n","  c7 = decoder_block(c6, skip3, 64) #16x16x128 > 32x32x64\n","  c8 = decoder_block(c7, skip2, 32) #32x32x64 > 64x64x32\n","  c9 = decoder_block(c8, skip1, 16) #64x64x32 > 128x128x16\n","\n","  #camada de saída:\n","  output = tf.keras.layers.Conv2D(n_classes, (1,1), activation='softmax')(c9) #128x128x16 > 128x128x8, 8= número de classes\n","\n","  model = Model(input, output, name=\"U-Net\")\n","  return model"]},{"cell_type":"markdown","metadata":{"id":"PNAUcp91q5YJ"},"source":["### Funcoes de perda e metricas"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KVOpgRDkk3ri"},"outputs":[],"source":["import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","from keras import backend as K\n","\n","# Definição da função de perda Jaccard\n","def jaccard_distance_loss(y_true, y_pred, smooth=100):\n","    \"\"\"\n","    Jaccard = (|X & Y|)/ (|X|+ |Y| - |X & Y|)\n","            = sum(|A*B|)/(sum(|A|)+sum(|B|)-sum(|A*B|))\n","\n","    Jaccard Distance Loss é útil para datasets desbalanceados.\n","    \"\"\"\n","    y_true = tf.convert_to_tensor(y_true, dtype=tf.float32)\n","    y_pred = tf.convert_to_tensor(y_pred, dtype=tf.float32)\n","\n","    intersection = tf.reduce_sum(tf.abs(y_true * y_pred), axis=-1)\n","    sum_ = tf.reduce_sum(tf.abs(y_true) + tf.abs(y_pred), axis=-1)\n","    jac = (intersection + smooth) / (sum_ - intersection + smooth)\n","    return (1 - jac) * smooth"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1v-Y_XEylvqA"},"outputs":[],"source":["### Monitoramentto de IOU no treino\n","class IoUCallback(tf.keras.callbacks.Callback):\n","    def on_epoch_end(self, epoch, logs=None):\n","        y_pred = self.model.predict(self.validation_data[0])\n","        y_pred_argmax = np.argmax(y_pred, axis=-1).astype(np.int32)\n","        iou = MeanIoU(num_classes=num_classes)\n","        iou.update_state(self.validation_data[1], y_pred_argmax)\n","        print(f\"Epoch {epoch + 1} - Mean IoU: {iou.result().numpy()}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rbjb__ItvuYr"},"outputs":[],"source":["#### dice_coef\n","def dice_coef(y_true, y_pred, smooth=1):\n","    y_true_f = tf.reshape(y_true, [-1])  # Achata y_true\n","    y_pred_f = tf.reshape(y_pred, [-1])  # Achata y_pred\n","    intersection = tf.reduce_sum(y_true_f * y_pred_f)  # Calcula a interseção\n","\n","    return (2. * intersection + smooth) / (tf.reduce_sum(y_true_f) + tf.reduce_sum(y_pred_f) + smooth)\n","\n","def dice_coef_loss(y_true, y_pred):\n","    return 1 - dice_coef(y_true, y_pred)\n"]},{"cell_type":"code","source":["\n","import keras.backend as K\n","\n","ALPHA = 0.8\n","GAMMA = 2\n","\n","def FocalLoss(targets, inputs, alpha=ALPHA, gamma=GAMMA):\n","\n","    inputs = K.flatten(inputs)\n","    targets = K.flatten(targets)\n","\n","    BCE = K.binary_crossentropy(targets, inputs)\n","    BCE_EXP = K.exp(-BCE)\n","    focal_loss = K.mean(alpha * K.pow((1-BCE_EXP), gamma) * BCE)\n","\n","    return focal_loss"],"metadata":{"id":"T0zipiNs-gCp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","import keras.backend as K\n","\n","ALPHA = 0.5\n","BETA = 0.5\n","\n","def TverskyLoss(targets, inputs, alpha=ALPHA, beta=BETA, smooth=1e-6):\n","\n","    #flatten label and prediction tensors\n","    inputs = K.flatten(inputs)\n","    targets = K.flatten(targets)\n","\n","    #True Positives, False Positives & False Negatives\n","    TP = K.sum((inputs * targets))\n","    FP = K.sum(((1-targets) * inputs))\n","    FN = K.sum((targets * (1-inputs)))\n","\n","    Tversky = (TP + smooth) / (TP + alpha*FP + beta*FN + smooth)\n","\n","    return 1 - Tversky"],"metadata":{"id":"f3dL8wx6fU0D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["###combo loss\n","\n","\n","ALPHA = 0.5 # < 0.5 penalises FP more, > 0.5 penalises FN more\n","CE_RATIO = 0.5 #weighted contribution of modified CE loss compared to Dice loss\n","\n","def Combo_loss(targets, inputs, eps=1e-9):\n","    targets = K.flatten(targets)\n","    inputs = K.flatten(inputs)\n","\n","    intersection = K.sum(targets * inputs)\n","    dice = (2. * intersection + smooth) / (K.sum(targets) + K.sum(inputs) + smooth)\n","    inputs = K.clip(inputs, eps, 1.0 - eps)\n","    out = - (ALPHA * ((targets * K.log(inputs)) + ((1 - ALPHA) * (1.0 - targets) * K.log(1.0 - inputs))))\n","    weighted_ce = K.mean(out, axis=-1)\n","    combo = (CE_RATIO * weighted_ce) - ((1 - CE_RATIO) * dice)\n","\n","    return combo"],"metadata":{"id":"Qa380NbEgLka"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dAQkngcWyHQh"},"source":["# Pré Processamento"]},{"cell_type":"markdown","metadata":{"id":"RnmOJAtXVHXp"},"source":["## Utils\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DBg6A0xCyGwU"},"outputs":[],"source":["import tensorflow as tf\n","import keras\n","import os\n","import re\n","import glob\n","import numpy as np\n","import cv2"]},{"cell_type":"markdown","metadata":{"id":"c2tkCcnmVq3V"},"source":["**Dicionário RGB > Rótulo**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"SyRSUzo8OAKg"},"outputs":[],"source":["def gen_dict_cores():\n","    mask_dict = {\n","        (0, 0, 0): 0,        # Preto = None\n","        (100, 0, 100): 1,    # Violeta = Liver (fígado)\n","        (255, 255, 255): 2,  # Branco = Bone (Osso)\n","        (0, 255, 0): 3,      # Verde = Gallbladder (Vesícula biliar)\n","        (255, 255, 0): 4,    # Amarelo = Kidney (Rins)\n","        (0, 0, 255): 5,      # Azul = Pancreas\n","        (255, 0, 0): 6,      # Vermelho = Vessels (Veias)\n","        (255, 0, 255): 7,    # Rosa = Spleen (Baço)\n","        (0, 255, 255): 8     # Azul claro = Adrenal (Glândula Adrenal)\n","    }\n","    return mask_dict"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OPPpXV6HAGI6"},"outputs":[],"source":["\"\"\" Função que mapeia cada pixel da imagem ao valor rgb definido no dicionário,\n"," e substitui o valor pelo rótulo correspondente, em um novo array.\"\"\"\n","\n","def RGBtoClass(rgb, dictCores):\n","    arr = np.zeros(rgb.shape[:2])  # Inicializa a matriz de rótulos\n","\n","    for color, label in dictCores.items():  # Itera sobre os pares (cor, rótulo)\n","        color = np.array(color)  # Converte a cor para um array NumPy\n","        arr[np.all(rgb == color, axis=-1)] = label  # Atribui o rótulo aos pixels que correspondem à cor\n","\n","    return arr"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ba4fuZk5YSdp"},"outputs":[],"source":["def onehot_to_rgb(oneHot, dictCores):\n","    oneHot = np.array(oneHot)  # Converte para array numpy\n","    oneHot = np.argmax(oneHot, axis=-1)  # Seleciona o maior valor (índice)\n","    output = np.zeros(oneHot.shape + (3,))  # Cria a matriz RGB de saída\n","    oneHot = np.expand_dims(oneHot, axis=-1)  # Expande as dimensões\n","\n","    for color, index in dictCores.items():\n","        output[np.all(oneHot == index, axis=-1)] = color\n","\n","    return np.uint8(output)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CRMZbmEQdfz9"},"outputs":[],"source":["\"\"\"esta função segmenta o nome do arquivo para o img_loader ordenar o dataset\n","na ordem do diretório e ter correspondência entre a lista de imagens e máscaras\"\"\"\n","\n","def natural_sort_key(s):\n","    return [int(text) if text.isdigit() else text.lower() for text in re.split('(\\d+)', s)]\n","\n","\"\"\" img_loader recebe um caminho de diretório,uma lista vazia e  uma tupla com\n","dimensões de imagem. Lê as imagens png ou jpg do diretório, ordena pelo nome e\n"," armazena a imagem na lista img_data e seu nome na lista img_names\"\"\"\n","def img_loader(path, img_data, size=None, rgb=True):\n","  #lista para o nome dos arquivos\n","  img_names = []\n","\n","  for diretorio_path in sorted(glob.glob(path)):\n","    for img_path in sorted(glob.glob(os.path.join(diretorio_path, \"*.[pj]*[np]*[g]*\")), key=natural_sort_key): #percorre o diretório na ordem natural dos títulos de arquivo\n","      img = cv2.imread(img_path,\n","                       cv2.IMREAD_COLOR if rgb\n","                       else cv2.IMREAD_GRAYSCALE) #img tem 3 canais na 3 dimensao se RGB, e 1 canal se preto/branco\n","\n","      if rgb:  # Corrige para formato RGB\n","        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n","      if size is not None:\n","        img = cv2.resize(img, size) #redimensiona conforme o parâmetro\n","\n","      img_data.append(img.astype(np.uint8)) #add a imagem na lista do parametro\n","      img_names.append(os.path.basename(img_path)) #add o nome do arquivo na lista de nomes\n","\n","  #return img_data, img_names\n","  return np.array(img_data), img_names"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ABSjbdexPe38"},"outputs":[],"source":["def save_dataset(X_train, X_val, X_test, y_train, y_val, y_test, save_dir=\"dataset\"):\n","    os.makedirs(save_dir, exist_ok=True)\n","\n","    np.save(os.path.join(save_dir, \"X_train.npy\"), X_train)\n","    np.save(os.path.join(save_dir, \"X_val.npy\"), X_val)\n","    np.save(os.path.join(save_dir, \"X_test.npy\"), X_test)\n","    np.save(os.path.join(save_dir, \"y_train.npy\"), y_train)\n","    np.save(os.path.join(save_dir, \"y_val.npy\"), y_val)\n","    np.save(os.path.join(save_dir, \"y_test.npy\"), y_test)\n","\n","    print(f\"Dataset salvo em {save_dir}\")\n","\n","def load_dataset(save_dir=\"dataset\"):\n","\n","    X_train = np.load(os.path.join(save_dir, \"X_train.npy\"))\n","    X_val = np.load(os.path.join(save_dir, \"X_val.npy\"))\n","    X_test = np.load(os.path.join(save_dir, \"X_test.npy\"))\n","    y_train = np.load(os.path.join(save_dir, \"y_train.npy\"))\n","    y_val = np.load(os.path.join(save_dir, \"y_val.npy\"))\n","    y_test = np.load(os.path.join(save_dir, \"y_test.npy\"))\n","\n","    print(f\"Dataset carregado de {save_dir}\")\n","    return X_train, X_val, X_test, y_train, y_val, y_test\n"]},{"cell_type":"markdown","metadata":{"id":"eSsJxP-VUU-I"},"source":["##Dataloader"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"8KbTZfgDUvpb"},"outputs":[],"source":["import tensorflow as tf\n","import keras\n","from keras.utils import to_categorical\n","import numpy as np\n","import pandas as pd\n","from matplotlib import pyplot as plt\n","import cv2\n","from google.colab.patches import cv2_imshow\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.utils import class_weight\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w0ji-TtDgKFC"},"outputs":[],"source":["# caminhos para os diretórios das imagens\n","#real_img_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/images/train\"\n","# não tem mascara de treino pra ultrasons reais\n","sim_img_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/images/train\"\n","sim_mask_treino = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/annotations/train\"\n","\n","#real_img_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/images/test\"\n","#real_mask_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Dataset_UltrassomAbdominal/abdominal_US/abdominal_US/RUS/annotations/test\"\n","sim_img_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/images/test\"\n","sim_mask_val = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data/abdominal_US/AUS/annotations/test\"\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"w03p7CWk8nEm"},"outputs":[],"source":["#conjuntos de treino\n","  #imagens simuladas\n","Simg_treino = []\n","Simg_treino_names = []\n","Smask_treino = []\n","Smask_treino_names = []\n","  #imagens reais\n","\"\"\"Rimg_treino = []\n","Rimg_treino_names = []\n","#ñ tem mascara real p teste\"\"\"\n","\n","#conjuntos de teste\n","  #imagens simuladas\n","Simg_val = []\n","Simg_val_names = []\n","Smask_val = []\n","Smask_val_names = []\n","\n","  #imagens reais\n","\"\"\"Rimg_val = []\n","Rimg_val_names = []\n","Rmask_val = []\n","Rmask_val_names = []\"\"\"\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-r407IjxJHIx"},"outputs":[],"source":["#Carregando os dados:\n","\n","dim = (256,256)\n","Simg_treino, Simg_treino_names = img_loader(sim_img_treino, Simg_treino,dim, False)\n","Smask_treino, Smask_treino_names = img_loader(sim_mask_treino,Smask_treino,dim)\n","#Rimg_treino, Rimg_treino_names = img_loader(real_img_treino,Rimg_treino,None,False)\n","\n","Simg_val, Simg_val_names = img_loader(sim_img_val, Simg_val,dim, False)\n","Smask_val, Smask_val_names = img_loader(sim_mask_val,Smask_val,dim)\n","#Rimg_val, Rimg_val_names = img_loader(real_img_val, Rimg_val,None,False)\n","#Rmask_val, Rmask_val_names = img_loader(real_mask_val,Rmask_val)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BwFEkyY_N4WL"},"outputs":[],"source":["'''concatenando as imagens e mascaras de treino / teste para separar ao carregar\n","no  train_test_split'''\n","all_imgs = np.concatenate((Simg_treino, Simg_val), axis=0)\n","all_masks = np.concatenate((Smask_treino, Smask_val), axis=0)\n","\n","all_imgname = Simg_treino_names + Simg_val_names\n","all_maskname = Smask_treino_names + Smask_val_names\n","\n","all_imgs  = np.expand_dims(all_imgs, axis=3)\n","#all_imgs.shape, all_masks.shape"]},{"cell_type":"markdown","metadata":{"id":"Ee0JzR_YW4b8"},"source":["**Convertendo máscaras**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FdrM1BRO_CCu"},"outputs":[],"source":["dictCores = gen_dict_cores()\n","all_mask_class = []\n","\n","for mask in  all_masks:\n","    onehotmask = RGBtoClass(mask, dictCores)\n","    all_mask_class.append(onehotmask)\n","\n","all_mask_class = np.array(all_mask_class)\n","all_mask_class = np.expand_dims(all_mask_class, axis=3)\n","\n","print(\"Classes únicas nos pixels das  máscaras :\", np.unique(all_mask_class), all_mask_class.shape)"]},{"cell_type":"markdown","metadata":{"id":"NmHs5SjSTfsA"},"source":["**Divisão do dataset em conjuntos de treino , validação e teste**\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"kuZdL1G8gL2o"},"outputs":[],"source":["# Divisão inicial: 10% para teste e 90% para treino e validação\n","X_train_val, X_test, y_train_val, y_test = train_test_split(\n","    all_imgs, all_mask_class, test_size=0.1, random_state=0, shuffle=False\n",")\n","\n","# Segunda divisão: 15% para validação e 85% para teste\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X_train_val, y_train_val, test_size=0.15, random_state=0, shuffle=False\n",")\n","\n","# tamanhos dos conjuntos\n","print(f\"Treino: {len(X_train)}, Validação: {len(X_val)}, Teste: {len(X_test)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XdjlxKQJQOXW"},"outputs":[],"source":["#normalizando os conjuntos\n","X_train = X_train.astype('float32') / 255.0\n","X_val = X_val.astype('float32') / 255.0\n","X_test = X_test.astype('float32') / 255.0\n","\n","y_train = y_train.astype(np.int32)\n","y_val = y_val.astype(np.int32)\n","y_test = y_test.astype(np.int32)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"b0ObKp0cPmJT"},"outputs":[],"source":["# Salvando os dados\n","save_dataset(X_train, X_val, X_test, y_train, y_val, y_test, save_dir = \"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal\")"]},{"cell_type":"markdown","metadata":{"id":"4l7SI2FEYMax"},"source":["retorna X_train,"]},{"cell_type":"markdown","metadata":{"id":"IJZxsKdvlmq4"},"source":[" **Balanceamento das classes**"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":1725,"status":"ok","timestamp":1732918273362,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"},"user_tz":180},"id":"mOciytaK_7NL","outputId":"492b7ed5-11a6-4efc-973b-0af6bc9615c3"},"outputs":[{"output_type":"stream","name":"stdout","text":["{0: 1.20155468390088, 1: 8.517934304706761, 2: 669.6612400415656, 3: 240.2873537027447, 4: 59.03460560249678, 5: 125.27637515288477, 6: 392.9762179009418, 7: 59.561815320392185, 8: 2298.597443772912}\n"]}],"source":["def calculate_class_weights(y_train_cat):\n","    mask_dict = gen_dict_cores()\n","    y_train_classes = np.argmax(y_train_cat, axis=-1)\n","\n","    # Flatten the array to count occurrences of each class\n","    y_train_classes_flat = y_train_classes.flatten()\n","\n","    # Compute class frequencies\n","    class_frequencies = np.bincount(y_train_classes_flat)\n","\n","    # Compute class weights based on frequency (inverse frequency)\n","    total_pixels = len(y_train_classes_flat)\n","    class_weights = {i: total_pixels / class_frequencies[i] if class_frequencies[i] > 0 else 1.0\n","                     for i in range(len(mask_dict))}\n","\n","    return class_weights\n","\n","# Exemplo de cálculo de pesos\n","class_weights = calculate_class_weights(y_train_cat)\n","print(class_weights)"]},{"cell_type":"markdown","metadata":{"id":"kU_-tY_R6hPB"},"source":["# Treinamento"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-UX7023aS5yS"},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras.models import load_model\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3031,"status":"ok","timestamp":1732919914974,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"},"user_tz":180},"id":"lgXpfMmVPqZo","outputId":"4cd171e0-65e4-4a52-93de-26d3eb75d074"},"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset carregado de /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data\n"]}],"source":["# Carregar os dadosa\n","X_train, X_val, X_test, y_train, y_val, y_test = load_dataset(save_dir=\"/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Data\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6KugAwHlmKkM"},"outputs":[],"source":["y_train_cat = to_categorical(y_train, num_classes = 9)\n","y_val_cat = to_categorical(y_val, num_classes = 9)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"p2IKuGHZkjIK"},"outputs":[],"source":["y_test_cat = to_categorical(y_val, num_classes = 9)"]},{"cell_type":"markdown","source":["### data augmentation"],"metadata":{"id":"FTje6SZGjWj_"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"GbsiL9HKwrbL","collapsed":true},"outputs":[],"source":["## Data augmentation  ##########################################################\n","\n","image_gen = ImageDataGenerator(\n","    rotation_range=15,            # Rotação aleatória de até 15 graus\n","    width_shift_range=0.3,        # Translação horizontal de até 30%\n","    height_shift_range=0.3,       # Translação vertical de até 30%\n","    horizontal_flip=True,         # Flip horizontal\n","    vertical_flip=True,           # Flip vertical\n","    fill_mode='nearest',          # Preenchimento de regiões em branco após transformação\n","    brightness_range=[0.9, 1.1],  # Ajuste aleatório de brilho (80% a 120% do valor original)\n","    )\n","\n","'''Mesmas transformações para as máscaras, exceto o brilho\n","para não afetar os valores das classes'''\n","\n","mask_gen = ImageDataGenerator(\n","    rotation_range=15,\n","    width_shift_range=0.3,\n","    height_shift_range=0.3,\n","    horizontal_flip=True,\n","    vertical_flip=True,\n","    fill_mode='nearest'\n","    )\n","\n","#ajustando os geradores para as imagens\n","image_gen.fit(X_train, augment=True)\n","mask_gen.fit(y_train, augment=True)\n","\n","# Instanciando os geradores para mascaras e imagens\n","image_generator = image_gen.flow(X_train, batch_size=32, seed=42)\n","mask_generator = mask_gen.flow(y_train, batch_size=32\n",", seed=42)\n","\n","# Combinando os geradores para gerar lotes com as mesmas transformações\n","train_generator = zip(image_generator, mask_generator)\n","def augmenteixons():\n","    for img, mask in train_generator:\n","        yield img, mask"]},{"cell_type":"markdown","source":["### *compilação e treinamento**\n"],"metadata":{"id":"N7kd99f9jZrt"}},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"MOtBwVi3q4xk"},"outputs":[],"source":["#parâmetros:\n","input_shape = (256,256, 1)\n","num_classes = 9\n","lr = 0.003\n","metrics = [\"accuracy\"]\n","#metrics = [dice_coef]\n","#metrics = [MeanIoU(num_classes=num_classes)]\n","\n","\n","#### loss functions\n","#loss =  SparseCategoricalCrossentropy()\n","#loss = 'categorical_crossentropy'\n","loss = jaccard_distance_loss(y_test, y_pred).numpy()\n","#loss = dice_coef_loss\n","#loss = focal_loss(gamma=2., alpha=0.35)\n","\n","#### Parâmetros p/ callbacks\n","model_name = 'jaccard02'\n","arquivo_modelo = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_{model_name}.keras' # .h não é mais aceito\n","arquivo_modelo_json = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_{model_name}.json'\n","\n","#### Callbacks\n","lr_reducer = ReduceLROnPlateau( monitor='val_loss', factor = 0.9, patience = 3, verbose = 1)\n","early_stopper = EarlyStopping(monitor='val_loss', min_delta=0, patience = 15, verbose = 1, mode='auto')\n","checkpointer = ModelCheckpoint(arquivo_modelo, monitor = 'val_loss', verbose = 1, save_best_only=True)\n","\n","#### Compilação\n","model = Unet(num_classes, input_shape)\n","model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=lr), loss=loss, metrics=metrics)\n","#model.summary()\n"]},{"cell_type":"markdown","source":["**treinamento**"],"metadata":{"id":"FyolAnBAjdS4"}},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"aHsztdaiAUNM"},"outputs":[],"source":["## treinamento sem augmentation ################################################\n","\n","history = model.fit(X_train, y_train_cat,\n","                    batch_size=16,\n","                    verbose=1,\n","                    epochs = 100,\n","                    validation_data=(X_val, y_val_cat),\n","                    callbacks=[lr_reducer,checkpointer],\n","                    shuffle=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"zM4cJRiK3yQj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732920978446,"user_tz":180,"elapsed":393089,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"ec81da5a-6134-4f30-e28d-344f2293ed1d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2s/step - accuracy: 0.5107 - loss: 2.1542\n","Epoch 1: val_loss improved from inf to 2.04209, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_focal01.keras\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m101s\u001b[0m 2s/step - accuracy: 0.5183 - loss: 2.1499 - val_accuracy: 0.4588 - val_loss: 2.0421 - learning_rate: 0.0030\n","Epoch 2/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 326ms/step - accuracy: 0.8322 - loss: 1.7130\n","Epoch 2: val_loss did not improve from 2.04209\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 342ms/step - accuracy: 0.8322 - loss: 1.7078 - val_accuracy: 0.6506 - val_loss: 2.2326 - learning_rate: 0.0030\n","Epoch 3/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 435ms/step - accuracy: 0.8483 - loss: 1.1754\n","Epoch 3: val_loss improved from 2.04209 to 1.02783, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_focal01.keras\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 472ms/step - accuracy: 0.8480 - loss: 1.1710 - val_accuracy: 0.8241 - val_loss: 1.0278 - learning_rate: 0.0030\n","Epoch 4/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 402ms/step - accuracy: 0.8393 - loss: 0.7847\n","Epoch 4: val_loss improved from 1.02783 to 0.78608, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_focal01.keras\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 458ms/step - accuracy: 0.8395 - loss: 0.7822 - val_accuracy: 0.8277 - val_loss: 0.7861 - learning_rate: 0.0030\n","Epoch 5/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 345ms/step - accuracy: 0.8406 - loss: 0.6322\n","Epoch 5: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 360ms/step - accuracy: 0.8406 - loss: 0.6317 - val_accuracy: 0.8278 - val_loss: 0.8703 - learning_rate: 0.0030\n","Epoch 6/100\n","\u001b[1m21/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 453ms/step - accuracy: 0.8423 - loss: 0.5912\n","Epoch 6: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 449ms/step - accuracy: 0.8424 - loss: 0.5905 - val_accuracy: 0.8270 - val_loss: 0.8621 - learning_rate: 0.0030\n","Epoch 7/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 394ms/step - accuracy: 0.8485 - loss: 0.5677\n","Epoch 7: ReduceLROnPlateau reducing learning rate to 0.002700000023469329.\n","\n","Epoch 7: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 427ms/step - accuracy: 0.8484 - loss: 0.5680 - val_accuracy: 0.8278 - val_loss: 0.8197 - learning_rate: 0.0030\n","Epoch 8/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 400ms/step - accuracy: 0.8403 - loss: 0.5879\n","Epoch 8: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 416ms/step - accuracy: 0.8404 - loss: 0.5872 - val_accuracy: 0.8270 - val_loss: 0.9062 - learning_rate: 0.0027\n","Epoch 9/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 458ms/step - accuracy: 0.8431 - loss: 0.5737\n","Epoch 9: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 477ms/step - accuracy: 0.8431 - loss: 0.5737 - val_accuracy: 0.8278 - val_loss: 0.9596 - learning_rate: 0.0027\n","Epoch 10/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 404ms/step - accuracy: 0.8447 - loss: 0.5677\n","Epoch 10: ReduceLROnPlateau reducing learning rate to 0.002430000063031912.\n","\n","Epoch 10: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 424ms/step - accuracy: 0.8447 - loss: 0.5674 - val_accuracy: 0.8278 - val_loss: 0.9322 - learning_rate: 0.0027\n","Epoch 11/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 426ms/step - accuracy: 0.8434 - loss: 0.5683\n","Epoch 11: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 443ms/step - accuracy: 0.8434 - loss: 0.5682 - val_accuracy: 0.8278 - val_loss: 0.9074 - learning_rate: 0.0024\n","Epoch 12/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 432ms/step - accuracy: 0.8411 - loss: 0.5742\n","Epoch 12: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 448ms/step - accuracy: 0.8412 - loss: 0.5738 - val_accuracy: 0.8278 - val_loss: 0.9727 - learning_rate: 0.0024\n","Epoch 13/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 356ms/step - accuracy: 0.8463 - loss: 0.5590\n","Epoch 13: ReduceLROnPlateau reducing learning rate to 0.0021870000986382366.\n","\n","Epoch 13: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 372ms/step - accuracy: 0.8462 - loss: 0.5591 - val_accuracy: 0.8278 - val_loss: 0.9242 - learning_rate: 0.0024\n","Epoch 14/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - accuracy: 0.8445 - loss: 0.5568\n","Epoch 14: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 449ms/step - accuracy: 0.8445 - loss: 0.5570 - val_accuracy: 0.8278 - val_loss: 1.1162 - learning_rate: 0.0022\n","Epoch 15/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 383ms/step - accuracy: 0.8424 - loss: 0.5610\n","Epoch 15: val_loss did not improve from 0.78608\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 400ms/step - accuracy: 0.8425 - loss: 0.5609 - val_accuracy: 0.8278 - val_loss: 0.8319 - learning_rate: 0.0022\n","Epoch 16/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 385ms/step - accuracy: 0.8355 - loss: 0.5838\n","Epoch 16: val_loss improved from 0.78608 to 0.78375, saving model to /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal//Modelos/modelo_focal01.keras\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 421ms/step - accuracy: 0.8358 - loss: 0.5831 - val_accuracy: 0.8108 - val_loss: 0.7837 - learning_rate: 0.0022\n","Epoch 17/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 424ms/step - accuracy: 0.8410 - loss: 0.5648\n","Epoch 17: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 439ms/step - accuracy: 0.8409 - loss: 0.5648 - val_accuracy: 0.8278 - val_loss: 1.3321 - learning_rate: 0.0022\n","Epoch 18/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 360ms/step - accuracy: 0.8457 - loss: 0.5557\n","Epoch 18: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 378ms/step - accuracy: 0.8457 - loss: 0.5557 - val_accuracy: 0.8278 - val_loss: 0.9480 - learning_rate: 0.0022\n","Epoch 19/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 431ms/step - accuracy: 0.8412 - loss: 0.5690\n","Epoch 19: ReduceLROnPlateau reducing learning rate to 0.0019683001097291707.\n","\n","Epoch 19: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 447ms/step - accuracy: 0.8413 - loss: 0.5687 - val_accuracy: 0.8278 - val_loss: 1.1631 - learning_rate: 0.0022\n","Epoch 20/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 433ms/step - accuracy: 0.8442 - loss: 0.5668\n","Epoch 20: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 448ms/step - accuracy: 0.8441 - loss: 0.5666 - val_accuracy: 0.8159 - val_loss: 0.8431 - learning_rate: 0.0020\n","Epoch 21/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 358ms/step - accuracy: 0.8475 - loss: 0.5521\n","Epoch 21: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 375ms/step - accuracy: 0.8474 - loss: 0.5523 - val_accuracy: 0.8278 - val_loss: 1.6894 - learning_rate: 0.0020\n","Epoch 22/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 424ms/step - accuracy: 0.8412 - loss: 0.5684\n","Epoch 22: ReduceLROnPlateau reducing learning rate to 0.0017714701825752854.\n","\n","Epoch 22: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 440ms/step - accuracy: 0.8414 - loss: 0.5682 - val_accuracy: 0.7174 - val_loss: 2.3989 - learning_rate: 0.0020\n","Epoch 23/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 389ms/step - accuracy: 0.8410 - loss: 0.5625\n","Epoch 23: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 423ms/step - accuracy: 0.8410 - loss: 0.5625 - val_accuracy: 0.8278 - val_loss: 1.8541 - learning_rate: 0.0018\n","Epoch 24/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 377ms/step - accuracy: 0.8434 - loss: 0.5635\n","Epoch 24: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 392ms/step - accuracy: 0.8435 - loss: 0.5634 - val_accuracy: 0.8278 - val_loss: 2.1460 - learning_rate: 0.0018\n","Epoch 25/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 425ms/step - accuracy: 0.8419 - loss: 0.5580\n","Epoch 25: ReduceLROnPlateau reducing learning rate to 0.001594323164317757.\n","\n","Epoch 25: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 441ms/step - accuracy: 0.8419 - loss: 0.5580 - val_accuracy: 0.8278 - val_loss: 2.6405 - learning_rate: 0.0018\n","Epoch 26/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 452ms/step - accuracy: 0.8480 - loss: 0.5488\n","Epoch 26: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 470ms/step - accuracy: 0.8479 - loss: 0.5492 - val_accuracy: 0.7995 - val_loss: 0.9820 - learning_rate: 0.0016\n","Epoch 27/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 391ms/step - accuracy: 0.8427 - loss: 0.5611\n","Epoch 27: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 407ms/step - accuracy: 0.8426 - loss: 0.5612 - val_accuracy: 0.8278 - val_loss: 1.5412 - learning_rate: 0.0016\n","Epoch 28/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 432ms/step - accuracy: 0.8371 - loss: 0.5620\n","Epoch 28: ReduceLROnPlateau reducing learning rate to 0.0014348908793181182.\n","\n","Epoch 28: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 448ms/step - accuracy: 0.8374 - loss: 0.5617 - val_accuracy: 0.8278 - val_loss: 1.0272 - learning_rate: 0.0016\n","Epoch 29/100\n","\u001b[1m21/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 370ms/step - accuracy: 0.8414 - loss: 0.5532\n","Epoch 29: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 371ms/step - accuracy: 0.8416 - loss: 0.5536 - val_accuracy: 0.8278 - val_loss: 2.0984 - learning_rate: 0.0014\n","Epoch 30/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 444ms/step - accuracy: 0.8405 - loss: 0.5614\n","Epoch 30: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 460ms/step - accuracy: 0.8406 - loss: 0.5613 - val_accuracy: 0.8278 - val_loss: 1.7295 - learning_rate: 0.0014\n","Epoch 31/100\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 438ms/step - accuracy: 0.8442 - loss: 0.5579\n","Epoch 31: ReduceLROnPlateau reducing learning rate to 0.0012914018123410642.\n","\n","Epoch 31: val_loss did not improve from 0.78375\n","\u001b[1m22/22\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 454ms/step - accuracy: 0.8442 - loss: 0.5577 - val_accuracy: 0.8278 - val_loss: 1.3769 - learning_rate: 0.0014\n","Epoch 31: early stopping\n"]}],"source":["## Treinamento com augmentation ################################################\n","\n","model_name = 'Aug02'\n","arquivo_modelo = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/modelo_{model_name}.keras' # .h não é mais aceito\n","arquivo_modelo_json = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/modelo_{model_name}.json'\n","\n","\n","history = model.fit(augmenteixons(),\n","                    steps_per_epoch=len(X_train) // 32,\n","                    verbose=1,\n","                    epochs = 100,\n","                    validation_data=(X_val, y_val),\n","                    callbacks=[ lr_reducer, checkpointer],\n","                    shuffle=False)"]},{"cell_type":"markdown","metadata":{"id":"p1t394iZIcVG"},"source":["##Avaliação"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"BHTLFYEz-I4e","colab":{"base_uri":"https://localhost:8080/","height":962},"executionInfo":{"status":"ok","timestamp":1732921028101,"user_tz":180,"elapsed":1192,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"5b409248-647b-4148-e8ef-10843d363d72"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 99ms/step - accuracy: 0.8298 - loss: 1.3188\n","Accuracy is =  82.83473253250122 %\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAACAzklEQVR4nO3dd5hT1dYG8DeZkukFplOGKp0BERCQoqCAihQLqFdAUa5SlGu5yqci4FW82CvqVcGKiFJVkCKgUgSkV0GBocwwtOk92d8fm5Myk5lJPynv73ny5OTk5GQnhMnKXmvvrRFCCBARERH5Ca3aDSAiIiJyJQY3RERE5FcY3BAREZFfYXBDREREfoXBDREREfkVBjdERETkVxjcEBERkV9hcENERER+hcENERER+RUGN0QqGDt2LJo0aeLQY6dPnw6NRuPaBnmZ48ePQ6PRYN68eR593vXr10Oj0WD9+vXGfbb+W7mrzU2aNMHYsWNdek5bzJs3DxqNBsePH/f4cxM5i8ENkRmNRmPTxfzLj8hZmzZtwvTp05Gbm6t2U4j8QrDaDSDyJp9//rnF7c8++wyrV6+utr9NmzZOPc///vc/GAwGhx77zDPP4KmnnnLq+cl2zvxb2WrTpk2YMWMGxo4di7i4OIv7Dh8+DK2Wv0OJ7MHghsjMP/7xD4vbW7ZswerVq6vtr6q4uBgRERE2P09ISIhD7QOA4OBgBAfzv66nOPNv5Qo6nU7V5yfyRfw5QGSnfv36oX379vjjjz/Qp08fRERE4P/+7/8AAEuXLsVNN92EtLQ06HQ6NG/eHM8//zz0er3FOarWcSj1Gq+88go+/PBDNG/eHDqdDl27dsW2bdssHmut5kaj0WDSpElYsmQJ2rdvD51Oh3bt2mHlypXV2r9+/XpcddVVCAsLQ/PmzfHBBx/YXMfz66+/4vbbb0fjxo2h0+nQqFEj/Otf/0JJSUm11xcVFYXTp09j2LBhiIqKQmJiIh5//PFq70Vubi7Gjh2L2NhYxMXFYcyYMTalZ7Zv3w6NRoNPP/202n0//fQTNBoNvv/+ewDAiRMnMGHCBLRq1Qrh4eGoX78+br/9dpvqSazV3Nja5j179mDs2LFo1qwZwsLCkJKSgvvuuw8XLlwwHjN9+nQ88cQTAICmTZsaU59K26zV3Pz999+4/fbbUa9ePURERODqq6/GDz/8YHGMUj/0zTff4IUXXkDDhg0RFhaG/v374+jRo3W+7pq89957aNeuHXQ6HdLS0jBx4sRqr/3IkSO49dZbkZKSgrCwMDRs2BCjRo1CXl6e8ZjVq1fjmmuuQVxcHKKiotCqVSvj/yMiZ/HnH5EDLly4gMGDB2PUqFH4xz/+geTkZACyCDMqKgqPPvoooqKi8PPPP2PatGnIz8/Hyy+/XOd5v/rqKxQUFOCf//wnNBoNZs+ejREjRuDvv/+uswfht99+w6JFizBhwgRER0fjrbfewq233orMzEzUr18fALBz504MGjQIqampmDFjBvR6PWbOnInExESbXvfChQtRXFyMhx56CPXr18fWrVvx9ttv49SpU1i4cKHFsXq9HgMHDkT37t3xyiuvYM2aNXj11VfRvHlzPPTQQwAAIQSGDh2K3377DQ8++CDatGmDxYsXY8yYMXW25aqrrkKzZs3wzTffVDt+wYIFiI+Px8CBAwEA27Ztw6ZNmzBq1Cg0bNgQx48fx5w5c9CvXz8cOHDArl43e9q8evVq/P3337j33nuRkpKC/fv348MPP8T+/fuxZcsWaDQajBgxAn/++Sfmz5+P119/HQkJCQBQ47/J2bNn0bNnTxQXF+Phhx9G/fr18emnn+KWW27Bt99+i+HDh1sc/9JLL0Gr1eLxxx9HXl4eZs+ejbvvvhu///67za9ZMX36dMyYMQMDBgzAQw89hMOHD2POnDnYtm0bNm7ciJCQEJSXl2PgwIEoKyvD5MmTkZKSgtOnT+P7779Hbm4uYmNjsX//ftx8883o2LEjZs6cCZ1Oh6NHj2Ljxo12t4nIKkFENZo4caKo+t+kb9++AoB4//33qx1fXFxcbd8///lPERERIUpLS437xowZI9LT0423jx07JgCI+vXri4sXLxr3L126VAAQy5cvN+577rnnqrUJgAgNDRVHjx417tu9e7cAIN5++23jviFDhoiIiAhx+vRp474jR46I4ODgaue0xtrrmzVrltBoNOLEiRMWrw+AmDlzpsWxnTt3Fl26dDHeXrJkiQAgZs+ebdxXWVkpevfuLQCIuXPn1tqeqVOnipCQEIv3rKysTMTFxYn77ruv1nZv3rxZABCfffaZcd+6desEALFu3TqL12L+b2VPm6097/z58wUA8csvvxj3vfzyywKAOHbsWLXj09PTxZgxY4y3p0yZIgCIX3/91bivoKBANG3aVDRp0kTo9XqL19KmTRtRVlZmPPbNN98UAMTevXurPZe5uXPnWrQpJydHhIaGihtuuMH4HEII8c477wgA4pNPPhFCCLFz504BQCxcuLDGc7/++usCgDh37lytbSByFNNSRA7Q6XS49957q+0PDw83bhcUFOD8+fPo3bs3iouLcejQoTrPO3LkSMTHxxtv9+7dG4BMQ9RlwIABaN68ufF2x44dERMTY3ysXq/HmjVrMGzYMKSlpRmPa9GiBQYPHlzn+QHL11dUVITz58+jZ8+eEEJg586d1Y5/8MEHLW737t3b4rX8+OOPCA4ONvbkAEBQUBAmT55sU3tGjhyJiooKLFq0yLhv1apVyM3NxciRI622u6KiAhcuXECLFi0QFxeHHTt22PRcjrTZ/HlLS0tx/vx5XH311QBg9/OaP3+3bt1wzTXXGPdFRUVh/PjxOH78OA4cOGBx/L333ovQ0FDjbXs+U+bWrFmD8vJyTJkyxaLA+YEHHkBMTIwxLRYbGwtApgaLi4utnkspml66dKnbi7UpMDG4IXJAgwYNLL4wFPv378fw4cMRGxuLmJgYJCYmGouRzesNatK4cWOL20qgc+nSJbsfqzxeeWxOTg5KSkrQokWLasdZ22dNZmYmxo4di3r16hnraPr27Qug+usLCwurlloxbw8ga2FSU1MRFRVlcVyrVq1sak9GRgZat26NBQsWGPctWLAACQkJuO6664z7SkpKMG3aNDRq1Ag6nQ4JCQlITExEbm6uTf8u5uxp88WLF/HII48gOTkZ4eHhSExMRNOmTQHY9nmo6fmtPZcygu/EiRMW+535TFV9XqD66wwNDUWzZs2M9zdt2hSPPvooPvroIyQkJGDgwIF49913LV7vyJEj0atXL9x///1ITk7GqFGj8M033zDQIZdhzQ2RA8x/kStyc3PRt29fxMTEYObMmWjevDnCwsKwY8cOPPnkkzb94Q4KCrK6Xwjh1sfaQq/X4/rrr8fFixfx5JNPonXr1oiMjMTp06cxduzYaq+vpva42siRI/HCCy/g/PnziI6OxrJly3DnnXdajCibPHky5s6diylTpqBHjx6IjY2FRqPBqFGj3PqFescdd2DTpk144okn0KlTJ0RFRcFgMGDQoEEe+yJ39+fCmldffRVjx47F0qVLsWrVKjz88MOYNWsWtmzZgoYNGyI8PBy//PIL1q1bhx9++AErV67EggULcN1112HVqlUe++yQ/2JwQ+Qi69evx4ULF7Bo0SL06dPHuP/YsWMqtsokKSkJYWFhVkfK2DJ6Zu/evfjzzz/x6aefYvTo0cb9q1evdrhN6enpWLt2LQoLCy16Qg4fPmzzOUaOHIkZM2bgu+++Q3JyMvLz8zFq1CiLY7799luMGTMGr776qnFfaWmpQ5Pm2drmS5cuYe3atZgxYwamTZtm3H/kyJFq57Rnxun09HSr74+S9kxPT7f5XPZQznv48GE0a9bMuL+8vBzHjh3DgAEDLI7v0KEDOnTogGeeeQabNm1Cr1698P777+M///kPAECr1aJ///7o378/XnvtNbz44ot4+umnsW7dumrnIrIX01JELqL82jT/RVxeXo733ntPrSZZCAoKwoABA7BkyRKcOXPGuP/o0aNYsWKFTY8HLF+fEAJvvvmmw2268cYbUVlZiTlz5hj36fV6vP322zafo02bNujQoQMWLFiABQsWIDU11SK4VNpetafi7bffrjYs3ZVttvZ+AcAbb7xR7ZyRkZEAYFOwdeONN2Lr1q3YvHmzcV9RURE+/PBDNGnSBG3btrX1pdhlwIABCA0NxVtvvWXxmj7++GPk5eXhpptuAgDk5+ejsrLS4rEdOnSAVqtFWVkZAJmuq6pTp04AYDyGyBnsuSFykZ49eyI+Ph5jxozBww8/DI1Gg88//9yt3f/2mj59OlatWoVevXrhoYcegl6vxzvvvIP27dtj165dtT62devWaN68OR5//HGcPn0aMTEx+O677+yu3TA3ZMgQ9OrVC0899RSOHz+Otm3bYtGiRXbXo4wcORLTpk1DWFgYxo0bV21G35tvvhmff/45YmNj0bZtW2zevBlr1qwxDpF3R5tjYmLQp08fzJ49GxUVFWjQoAFWrVpltSevS5cuAICnn34ao0aNQkhICIYMGWIMesw99dRTmD9/PgYPHoyHH34Y9erVw6effopjx47hu+++c9tsxomJiZg6dSpmzJiBQYMG4ZZbbsHhw4fx3nvvoWvXrsbasp9//hmTJk3C7bffjiuuuAKVlZX4/PPPERQUhFtvvRUAMHPmTPzyyy+46aabkJ6ejpycHLz33nto2LChRaE0kaMY3BC5SP369fH999/jsccewzPPPIP4+Hj84x//QP/+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jPt69+4t/vGPf9T4mJtuukk89thjxtt9+/YVjzzyiPF2enq6eP3114UQQvz0008iODhYnD592nj/ihUrBACxePHiGp/j5ZdfFl26dDHefu6550RGRka148zP8+GHH4r4+HhRaPb6f/jhB6HVakV2drYQQogxY8aI9PR0UVlZaTzm9ttvFyNHjqyxLVWfOy0tTbzwwgsWx3Tt2lVMmDBBCCHE5MmTxXXXXScMBkO1c7366qviiiuuEOXl5TU+n8Lq54qI3KtHD/l39MsvTfs2bZL7mjVTr13ksLy8vBq/v6vymtFSEydOxL59+/D111/XelyPHj0wevRodOrUCX379sWiRYuQmJiIDz74wOrxs2bNQmxsrPHSqFEjdzRfda1bt0bPnj3xySefAACOHj2KX3/9FePGjQMA6PV6PP/88+jQoQPq1auHqKgo/PTTT8jMzLTp/AcPHkSjRo2QpuSuIf8tqlqwYAF69eqFlJQUREVF4ZlnnrH5OcyfKyMjA5HKCr4AevXqBYPBYFFw3q5dOwQFBRlvp6amIicnx6bnyM/Px5kzZ9CrVy+L/b169cLBgwcByNTXrl270KpVKzz88MNYtWqV8bjbb78dJSUlaNasGR544AEsXrwYlZWVdr1OInITvR5QBlEow8AB9twEEK8IbiZNmoTvv/8e69atQ8OGDe16bEhICDp37oyjR49avX/q1KnIy8szXpS0gs0iIoDCQnUudhbzjhs3Dt999x0KCgowd+5cNG/eHH379gUAvPzyy3jzzTfx5JNPYt26ddi1axcGDhyI8vJy+96PWmzevBl33303brzxRnz//ffYuXMnnn76aZc+h7mQkBCL2xqNBgaDwWXnv/LKK3Hs2DE8//zzKCkpwR133IHbbrsNgFzN/PDhw3jvvfcQHh6OCRMmoE+fPnbV/BCRm/z1l1z9OzwcuOIK037zgmIh1GkbeYSqNTdCCEyePBmLFy/G+vXr0bRpU7vPodfrsXfvXtx4441W79fpdM6NwtFoALMeBG92xx134JFHHsFXX32Fzz77DA899JCx/mbjxo0YOnQo/vGPfwCQNTR//vkn2rZta9O527Rpg5MnTyIrKwupqakAgC1btlgcs2nTJqSnp+Ppp5827qs6ki00NBR6vb7O55o3bx6KioqMvTcbN26EVqtFq1atbGpvXWJiYpCWloaNGzca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EkII8eGHH4r4+HhRWFhovP+HH34QWq3WuHJ4WlqaePrpp2tsAwDxzDPPGG8XFhYKAGLFihVCCCGGDBki7r33Xte8YCLyKNbcEJEqrr32WsyZM8diX7169YzbPXr0sLivR48e2LVrFwDg4MGDyMjIQGRkpPH+Xr16wWAw4PDhw9BoNDhz5gz69+9faxs6duxo3I6MjERMTAxycnIAAA899BBuvfVW7NixAzfccAOGDRuGnj17OvRaicizGNwQkSoiIyOrpYlcJTw83KbjQkJCLG5rNBoYDAYAwODBg3HixAn8+OOPWL16Nfr374+JEyfilVdecXl7ici1WHNDRF5py5Yt1W63adMGANCmTRvs3r0bRUVFxvs3btwIrVaLVq1aITo6Gk2aNMHatWudakNiYiLGjBmDL774Am+88QY+/PBDp85HRJ7BnhsiUkVZWRmys7Mt9gUHBxuLdhcuXIirrroK11xzDb788kts3boVH3/8MQDg7rvvxnPPPYcxY8Zg+vTpOHfuHCZPnox77rkHycnJAIDp06fjwQcfRFJSEgYPHoyCggJs3LgRkydPtql906ZNQ5cuXdCuXTuUlZXh+++/NwZXROTdGNwQkSpWrlyJ1NRUi32tWrXCoUOHAMiRTF9//TUmTJiA1NRUzJ8/H23btgUARERE4KeffsIjjzyCrl27IiIiArfeeitee+0147nGjBmD0tJSvP7663j88ceRkJCA2267zeb2hYaGYurUqTh+/DjCw8PRu3dvfP311y545UTkbhohhFC7EURE5jQaDRYvXoxhw4ap3RQi8kGsuSEiIiK/wuCGiIiI/AprbojI6zBbTkTOYM8NERER+RUGN0RERORXGNwQERGRX2FwQ0RERH6FwQ0RERH5FQY3RERE5FcY3BAREZFfYXBDREREfoXBDREREfmV/wd3cNQbPqOJZQAAAABJRU5ErkJggg==\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["_, acc = model.evaluate(X_test, y_test)\n","print(\"Accuracy is = \", (acc * 100.0), \"%\")\n","\n","##Plota a loss e accuracy de treino e validação a acda época\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, 'y', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","plt.plot(epochs, acc, 'y', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Training and validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","\n","plt.show()\n"]},{"cell_type":"code","source":["# Gráfico de perda\n","import matplotlib.pyplot as plt\n","\n","plt.plot(history.history['loss'], label='Train Loss')\n","plt.plot(history.history['val_loss'], label='Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","# Gráfico de métrica\n","plt.plot(history.history['dice_coef'], label='Train Dice')\n","plt.plot(history.history['val_dice_coef'], label='Validation Dice')\n","plt.xlabel('Epochs')\n","plt.ylabel('IoU')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":881},"id":"hhZACy2UoYdg","executionInfo":{"status":"ok","timestamp":1732918092205,"user_tz":180,"elapsed":904,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"b86a409b-5eef-4691-cc59-9bdc140594f8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"V-KdDIB1qlQA"},"source":["# Testes"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"e6MjCIMdcd9G","colab":{"base_uri":"https://localhost:8080/","height":124},"executionInfo":{"status":"error","timestamp":1732915737753,"user_tz":180,"elapsed":480,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"41267b22-c3dc-4792-e3dd-cf23b253c79f"},"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-26-1be96b584e2b>, line 4)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-26-1be96b584e2b>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    model = load_model(/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_dice01.keras)\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}],"source":["###### Carregando modelo #######\n","\n","model_name = 'modelo_dice01'\n","model = load_model('/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_dice01.keras')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wHD1Pe-nbjsX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732921075634,"user_tz":180,"elapsed":5555,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"73a6987a-10b6-4d30-d404-46766dff654b"},"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m3/3\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 1s/step\n"]}],"source":["#predição do conjunto de teste\n","y_pred=model.predict(X_test)\n","y_pred_argmax=np.argmax(y_pred, axis=3)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2GV01_pDcHAj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732918177972,"user_tz":180,"elapsed":1802,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"703af5c3-f6c3-472c-df92-e63f0e1dec8e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mean IoU TESTE = 0.3787398\n"]}],"source":["####### avaliando pela metrica \"intersection over union\" no conjunto de teste ##\n","from keras.metrics import MeanIoU\n","n_classes = 9\n","IOU_keras = MeanIoU(num_classes=n_classes)\n","IOU_keras.update_state(y_test[:,:,:,0], y_pred_argmax)\n","\n","print(\"Mean IoU TESTE =\", IOU_keras.result().numpy())\n"]},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","dictCores = gen_dict_cores()\n","\n","# Seleciona um índice aleatório do conjunto de teste\n","random_idx = np.random.randint(0, len(X_test))\n","\n","# Seleciona a imagem, a máscara e a predição correspondentes\n","img = X_test[random_idx]\n","mask = y_test[random_idx]\n","pred = y_pred[random_idx]\n","\n","# Mostra a imagem original, a máscara e a predição\n","plt.figure(figsize=(12, 4))\n","\n","# Imagem original\n","plt.subplot(1, 3, 1)\n","plt.imshow(img, cmap='gray')\n","plt.title(\"Imagem Original\")\n","plt.axis('off')\n","\n","# Máscara\n","plt.subplot(1, 3, 2)\n","plt.imshow(onehot_to_rgb(to_categorical(mask, num_classes = 9), dictCores))\n","plt.title(\"Ground Truth\")\n","plt.axis('off')\n","#plt.xlabel(all_imagename[random_idx])\n","\n","# Predição\n","plt.subplot(1, 3, 3)\n","plt.imshow(onehot_to_rgb(pred, dictCores), cmap='gray')\n","plt.title(\"Predição\")\n","plt.axis('off')\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":225},"id":"h67dSs4f-PsR","executionInfo":{"status":"ok","timestamp":1732921119855,"user_tz":180,"elapsed":405,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"ad0280ee-5150-469e-cb6a-9ce82ca6a6a9"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"RXrDnwi9eTs6"},"source":["**Salvando todas as predições:**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hv_0GFcQc3-Z","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732915885355,"user_tz":180,"elapsed":31856,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"}},"outputId":"f577b963-b68a-40ca-bded-53fa2ed89cc1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Todas as imagens foram salvas em: /content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Testes/Tdice01\n"]}],"source":["###### Salvando todas as predições #######\n","\n","testename = 'dice01'\n","output_dir = f'/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Testes/T{testename}'\n","os.makedirs(output_dir, exist_ok=True)  # Cria o diretório, se não existir\n","dictCores = gen_dict_cores()\n","\n","# Itera sobre todo o conjunto de teste\n","for idx in range(len(X_test)):\n","    # Seleciona a imagem, a máscara e a predição correspondentes\n","    img = X_test[idx]\n","    mask = y_test[idx]\n","    pred = y_pred[idx]\n","\n","    # Cria o plot\n","    plt.figure(figsize=(12, 4))\n","\n","    # Imagem original\n","    plt.subplot(1, 3, 1)\n","    plt.imshow(img, cmap='gray')\n","    plt.title(\"Imagem Original\")\n","    plt.axis('off')\n","\n","    # Máscara\n","    plt.subplot(1, 3, 2)\n","    plt.imshow(onehot_to_rgb(to_categorical(mask, num_classes=9), dictCores))\n","    plt.title(\"Ground Truth\")\n","    plt.axis('off')\n","\n","    # Predição\n","    plt.subplot(1, 3, 3)\n","    plt.imshow(onehot_to_rgb(pred, dictCores), cmap='gray')\n","    plt.title(\"Predição\")\n","    plt.axis('off')\n","\n","    # Salva o plot no diretório\n","    output_path = os.path.join(output_dir, f\"plot_{idx}.png\")\n","    plt.savefig(output_path, bbox_inches='tight')\n","    plt.close()\n","\n","print(f\"Todas as imagens foram salvas em: {output_dir}\")"]},{"cell_type":"markdown","metadata":{"id":"pI_Q3EetdFo9"},"source":["# Main"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":652},"executionInfo":{"elapsed":1659,"status":"ok","timestamp":1732680887080,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"},"user_tz":180},"id":"_UXawXlIUjnw","outputId":"081f89ea-a58f-4f8b-b761-5bbee4ad1dda"},"outputs":[{"name":"stdout","output_type":"stream","text":["Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n","\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","* Running on public URL: https://7b3caa3add36133591.gradio.live\n","\n","This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"]},{"data":{"text/html":["<div><iframe src=\"https://7b3caa3add36133591.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{},"output_type":"display_data"},{"data":{"text/plain":[]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["\n","import numpy as np\n","import tensorflow as tf\n","import cv2\n","from PIL import Image\n","import gradio as gr\n","from tensorflow.keras.models import load_model\n","\n","model = load_model('/content/drive/MyDrive/Colab Notebooks/Segementação_Abdominal/Modelos/modelo_01_UnetUS.keras')\n","\n","def gen_dict_cores_labels():\n","    mask_dict = {\n","        (0, 0, 0): (0, \"Fundo\"),             # Preto = None\n","        (100, 0, 100): (1, \"Figado\"),        # Violeta = Liver (fígado)\n","        (255, 255, 255): (2, \"Osso\"),       # Branco = Bone (Osso)\n","        (0, 255, 0): (3, \"Vesicula biliar\"),    # Verde = Gallbladder (Vesícula biliar)\n","        (255, 255, 0): (4, \"Rim\"),       # Amarelo = Kidney (Rins)\n","        (0, 0, 255): (5, \"Pancreas\"),       # Azul = Pancreas\n","        (255, 0, 0): (6, \"Veia\"),        # Vermelho = Vessels (Veias)\n","        (255, 0, 255): (7, \"Baço\"),       # Rosa = Spleen (Baço)\n","        (0, 255, 255): (8, \"Gland. Adrenal\")       # Azul claro = Adrenal (Glândula Adrenal)\n","    }\n","    return mask_dict\n","\n","# Função para converter de one-hot para RGB e identificar classes\n","def onehot_to_rgb_labels(oneHot, dictCoresLabels):\n","    oneHot = np.array(oneHot)\n","    oneHot = np.argmax(oneHot, axis=-1)\n","    output = np.zeros(oneHot.shape + (3,))  # Cria a matriz RGB de saída\n","    present_classes = set()\n","\n","    for color, (_, label) in dictCoresLabels.items():\n","        mask = oneHot == _ # Ajustado para evitar erro\n","        output[mask] = color\n","        if np.any(mask):\n","            present_classes.add(label)\n","\n","    return np.uint8(output), list(present_classes)\n","\n","# Função para criar legenda em HTML com nomes e cores\n","def create_legend_html(present_labels, dictCoresLabels):\n","    legend_html = \"<ul style='list-style-type:none; padding:0;'>\"\n","    for color, (_, label) in dictCoresLabels.items():\n","        if label in present_labels:\n","            color_hex = f\"rgb{color}\"  # Converte a cor para o formato RGB\n","            legend_html += f\"<li style='color:{color_hex}; font-weight:bold;'>{label}</li>\"\n","    legend_html += \"</ul>\"\n","    return legend_html\n","\n","def predictmask_legend(image):\n","    dictCoresLabels = gen_dict_cores_labels()\n","\n","    original_size = image.size\n","    image_resized = preprocess_image(image)\n","\n","    y_pred = model.predict(image_resized)\n","    y_pred = y_pred[0]\n","\n","    # Converte a predição para RGB e identifica os rótulos\n","    y_pred_rgb, labels = onehot_to_rgb_labels(y_pred, dictCoresLabels)\n","\n","    # Redimensiona a máscara para o tamanho original da imagem\n","    y_pred_resized = cv2.resize(y_pred_rgb, original_size, interpolation=cv2.INTER_NEAREST)\n","    image_original_rgb = image.convert(\"RGB\")\n","\n","    # Combina a imagem original com a máscara\n","    alpha = 0.7\n","    image_combined = cv2.addWeighted(np.array(image_original_rgb), 1 - alpha, y_pred_resized, alpha, 0)\n","    legend_html = create_legend_html(labels, dictCoresLabels) #gera legenda\n","\n","    return Image.fromarray(np.uint8(image_combined)), legend_html\n","\n","def preprocess_image(image):\n","\n","    image_resized = cv2.resize(np.array(image), (256, 256))\n","    image_resized = cv2.cvtColor(image_resized, cv2.COLOR_BGR2GRAY)\n","\n","    # Normaliza e add batchdim\n","    image_resized = image_resized.astype('float32') / 255.0\n","    image_resized = np.expand_dims(image_resized, axis=0)\n","\n","    # Adiciona uma dimensão extra p/ canal de cor\n","    image_resized = np.expand_dims(image_resized, axis=-1)\n","\n","    return image_resized\n","\n","# Interface Gradio\n","interface = gr.Interface(\n","    fn=predictmask_legend,   # Função para predição e legendas\n","    inputs=gr.Image(type=\"pil\", label=\"Carregue uma imagem\"),  # Entrada de imagem\n","    outputs=[\n","        gr.Image(type=\"pil\", label=\"Imagem Segmentada\"),  # Saída da imagem com sobreposição\n","        gr.HTML(label=\"Legenda dos Órgãos Detectados\")                # Saída em HTML para legenda colorida\n","    ],\n","    title=\"Segmentador de Ultrassom Abdominal\",         # Título da interface\n","    description=\"Carregue uma ultrassonografia de cavidade abdominal para identificar os órgãos.\"\n",")\n","\n","interface.launch()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30925,"status":"ok","timestamp":1732680093570,"user":{"displayName":"davi bezerra","userId":"17273633987948576903"},"user_tz":180},"id":"1eDlndkc_UOJ","outputId":"d9c19221-2574-4b75-b01b-5446193daed7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting gradio\n","  Downloading gradio-5.6.0-py3-none-any.whl.metadata (16 kB)\n","Collecting aiofiles<24.0,>=22.0 (from gradio)\n","  Downloading aiofiles-23.2.1-py3-none-any.whl.metadata (9.7 kB)\n","Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.7.1)\n","Collecting fastapi<1.0,>=0.115.2 (from gradio)\n","  Downloading fastapi-0.115.5-py3-none-any.whl.metadata (27 kB)\n","Collecting ffmpy (from gradio)\n","  Downloading ffmpy-0.4.0-py3-none-any.whl.metadata (2.9 kB)\n","Collecting gradio-client==1.4.3 (from gradio)\n","  Downloading gradio_client-1.4.3-py3-none-any.whl.metadata (7.1 kB)\n","Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.27.2)\n","Requirement already satisfied: huggingface-hub>=0.25.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.26.2)\n","Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.1.4)\n","Collecting markupsafe~=2.0 (from gradio)\n","  Downloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n","Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.26.4)\n","Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.10.11)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from gradio) (24.2)\n","Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.2.2)\n","Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (11.0.0)\n","Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.9.2)\n","Collecting pydub (from gradio)\n","  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n","Collecting python-multipart==0.0.12 (from gradio)\n","  Downloading python_multipart-0.0.12-py3-none-any.whl.metadata (1.9 kB)\n","Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (6.0.2)\n","Collecting ruff>=0.2.2 (from gradio)\n","  Downloading ruff-0.8.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n","Collecting safehttpx<1.0,>=0.1.1 (from gradio)\n","  Downloading safehttpx-0.1.1-py3-none-any.whl.metadata (4.1 kB)\n","Collecting semantic-version~=2.0 (from gradio)\n","  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n","Collecting starlette<1.0,>=0.40.0 (from gradio)\n","  Downloading starlette-0.41.3-py3-none-any.whl.metadata (6.0 kB)\n","Collecting tomlkit==0.12.0 (from gradio)\n","  Downloading tomlkit-0.12.0-py3-none-any.whl.metadata (2.7 kB)\n","Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.13.0)\n","Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.12.2)\n","Collecting uvicorn>=0.14.0 (from gradio)\n","  Downloading uvicorn-0.32.1-py3-none-any.whl.metadata (6.6 kB)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.4.3->gradio) (2024.10.0)\n","Collecting websockets<13.0,>=10.0 (from gradio-client==1.4.3->gradio)\n","  Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\n","Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n","Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n","Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.2.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (2024.8.30)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.0.7)\n","Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (3.16.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (2.32.3)\n","Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (4.66.6)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.23.4 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (2.23.4)\n","Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.7)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n","Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.16.0)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (3.4.0)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (2.2.3)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n","Downloading gradio-5.6.0-py3-none-any.whl (57.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.1/57.1 MB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading gradio_client-1.4.3-py3-none-any.whl (320 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m320.1/320.1 kB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_multipart-0.0.12-py3-none-any.whl (23 kB)\n","Downloading tomlkit-0.12.0-py3-none-any.whl (37 kB)\n","Downloading aiofiles-23.2.1-py3-none-any.whl (15 kB)\n","Downloading fastapi-0.115.5-py3-none-any.whl (94 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.9/94.9 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n","Downloading ruff-0.8.0-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.1/11.1 MB\u001b[0m \u001b[31m20.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading safehttpx-0.1.1-py3-none-any.whl (8.4 kB)\n","Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n","Downloading starlette-0.41.3-py3-none-any.whl (73 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.2/73.2 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading uvicorn-0.32.1-py3-none-any.whl (63 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.8/63.8 kB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ffmpy-0.4.0-py3-none-any.whl (5.8 kB)\n","Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n","Downloading websockets-12.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl (130 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m130.2/130.2 kB\u001b[0m \u001b[31m5.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: pydub, websockets, uvicorn, tomlkit, semantic-version, ruff, python-multipart, markupsafe, ffmpy, aiofiles, starlette, safehttpx, gradio-client, fastapi, gradio\n","  Attempting uninstall: markupsafe\n","    Found existing installation: MarkupSafe 3.0.2\n","    Uninstalling MarkupSafe-3.0.2:\n","      Successfully uninstalled MarkupSafe-3.0.2\n","Successfully installed aiofiles-23.2.1 fastapi-0.115.5 ffmpy-0.4.0 gradio-5.6.0 gradio-client-1.4.3 markupsafe-2.1.5 pydub-0.25.1 python-multipart-0.0.12 ruff-0.8.0 safehttpx-0.1.1 semantic-version-2.10.0 starlette-0.41.3 tomlkit-0.12.0 uvicorn-0.32.1 websockets-12.0\n"]}],"source":["!pip install gradio"]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1HbJhpvaPbtoOiY0GAwZspOOiWU8tqCnU","authorship_tag":"ABX9TyPsIIOzuq3w7B7a5bjYIG4e"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}